function I(g){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I(g)}function g(g){var C=function(g,C){if("object"!=I(g)||!g)return g;var A=g[Symbol.toPrimitive];if(void 0!==A){var e=A.call(g,C||"default");if("object"!=I(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===C?String:Number)(g)}(g,"string");return"symbol"==I(C)?C:String(C)}function C(I,C,A){return(C=g(C))in I?Object.defineProperty(I,C,{value:A,enumerable:!0,configurable:!0,writable:!0}):I[C]=A,I}function A(I,g,C,A,e,c,l){try{var t=I[c](l),s=t.value}catch(I){return void C(I)}t.done?g(s):Promise.resolve(s).then(A,e)}function e(I){return function(){var g=this,C=arguments;return new Promise((function(e,c){var l=I.apply(g,C);function t(I){A(l,e,c,t,s,"next",I)}function s(I){A(l,e,c,t,s,"throw",I)}t(void 0)}))}}function c(I){return I&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I}var l={exports:{}},t={exports:{}};!function(I){function g(C){return I.exports=g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I.exports.__esModule=!0,I.exports.default=I.exports,g(C)}I.exports=g,I.exports.__esModule=!0,I.exports.default=I.exports}(t);var s=t.exports;!function(I){var g=s.default;function C(){I.exports=C=function(){return e},I.exports.__esModule=!0,I.exports.default=I.exports;var A,e={},c=Object.prototype,l=c.hasOwnProperty,t=Object.defineProperty||function(I,g,C){I[g]=C.value},s="function"==typeof Symbol?Symbol:{},Z=s.iterator||"@@iterator",d=s.asyncIterator||"@@asyncIterator",b=s.toStringTag||"@@toStringTag";function i(I,g,C){return Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}),I[g]}try{i({},"")}catch(A){i=function(I,g,C){return I[g]=C}}function r(I,g,C,A){var e=g&&g.prototype instanceof y?g:y,c=Object.create(e.prototype),l=new Y(A||[]);return t(c,"_invoke",{value:p(I,C,l)}),c}function o(I,g,C){try{return{type:"normal",arg:I.call(g,C)}}catch(I){return{type:"throw",arg:I}}}e.wrap=r;var n="suspendedStart",m="suspendedYield",G="executing",a="completed",B={};function y(){}function V(){}function W(){}var u={};i(u,Z,(function(){return this}));var R=Object.getPrototypeOf,X=R&&R(R(w([])));X&&X!==c&&l.call(X,Z)&&(u=X);var h=W.prototype=y.prototype=Object.create(u);function H(I){["next","throw","return"].forEach((function(g){i(I,g,(function(I){return this._invoke(g,I)}))}))}function k(I,C){function A(e,c,t,s){var Z=o(I[e],I,c);if("throw"!==Z.type){var d=Z.arg,b=d.value;return b&&"object"==g(b)&&l.call(b,"__await")?C.resolve(b.__await).then((function(I){A("next",I,t,s)}),(function(I){A("throw",I,t,s)})):C.resolve(b).then((function(I){d.value=I,t(d)}),(function(I){return A("throw",I,t,s)}))}s(Z.arg)}var e;t(this,"_invoke",{value:function(I,g){function c(){return new C((function(C,e){A(I,g,C,e)}))}return e=e?e.then(c,c):c()}})}function p(I,g,C){var e=n;return function(c,l){if(e===G)throw new Error("Generator is already running");if(e===a){if("throw"===c)throw l;return{value:A,done:!0}}for(C.method=c,C.arg=l;;){var t=C.delegate;if(t){var s=J(t,C);if(s){if(s===B)continue;return s}}if("next"===C.method)C.sent=C._sent=C.arg;else if("throw"===C.method){if(e===n)throw e=a,C.arg;C.dispatchException(C.arg)}else"return"===C.method&&C.abrupt("return",C.arg);e=G;var Z=o(I,g,C);if("normal"===Z.type){if(e=C.done?a:m,Z.arg===B)continue;return{value:Z.arg,done:C.done}}"throw"===Z.type&&(e=a,C.method="throw",C.arg=Z.arg)}}}function J(I,g){var C=g.method,e=I.iterator[C];if(e===A)return g.delegate=null,"throw"===C&&I.iterator.return&&(g.method="return",g.arg=A,J(I,g),"throw"===g.method)||"return"!==C&&(g.method="throw",g.arg=new TypeError("The iterator does not provide a '"+C+"' method")),B;var c=o(e,I.iterator,g.arg);if("throw"===c.type)return g.method="throw",g.arg=c.arg,g.delegate=null,B;var l=c.arg;return l?l.done?(g[I.resultName]=l.value,g.next=I.nextLoc,"return"!==g.method&&(g.method="next",g.arg=A),g.delegate=null,B):l:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,B)}function F(I){var g={tryLoc:I[0]};1 in I&&(g.catchLoc=I[1]),2 in I&&(g.finallyLoc=I[2],g.afterLoc=I[3]),this.tryEntries.push(g)}function S(I){var g=I.completion||{};g.type="normal",delete g.arg,I.completion=g}function Y(I){this.tryEntries=[{tryLoc:"root"}],I.forEach(F,this),this.reset(!0)}function w(I){if(I||""===I){var C=I[Z];if(C)return C.call(I);if("function"==typeof I.next)return I;if(!isNaN(I.length)){var e=-1,c=function g(){for(;++e<I.length;)if(l.call(I,e))return g.value=I[e],g.done=!1,g;return g.value=A,g.done=!0,g};return c.next=c}}throw new TypeError(g(I)+" is not iterable")}return V.prototype=W,t(h,"constructor",{value:W,configurable:!0}),t(W,"constructor",{value:V,configurable:!0}),V.displayName=i(W,b,"GeneratorFunction"),e.isGeneratorFunction=function(I){var g="function"==typeof I&&I.constructor;return!!g&&(g===V||"GeneratorFunction"===(g.displayName||g.name))},e.mark=function(I){return Object.setPrototypeOf?Object.setPrototypeOf(I,W):(I.__proto__=W,i(I,b,"GeneratorFunction")),I.prototype=Object.create(h),I},e.awrap=function(I){return{__await:I}},H(k.prototype),i(k.prototype,d,(function(){return this})),e.AsyncIterator=k,e.async=function(I,g,C,A,c){void 0===c&&(c=Promise);var l=new k(r(I,g,C,A),c);return e.isGeneratorFunction(g)?l:l.next().then((function(I){return I.done?I.value:l.next()}))},H(h),i(h,b,"Generator"),i(h,Z,(function(){return this})),i(h,"toString",(function(){return"[object Generator]"})),e.keys=function(I){var g=Object(I),C=[];for(var A in g)C.push(A);return C.reverse(),function I(){for(;C.length;){var A=C.pop();if(A in g)return I.value=A,I.done=!1,I}return I.done=!0,I}},e.values=w,Y.prototype={constructor:Y,reset:function(I){if(this.prev=0,this.next=0,this.sent=this._sent=A,this.done=!1,this.delegate=null,this.method="next",this.arg=A,this.tryEntries.forEach(S),!I)for(var g in this)"t"===g.charAt(0)&&l.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=A)},stop:function(){this.done=!0;var I=this.tryEntries[0].completion;if("throw"===I.type)throw I.arg;return this.rval},dispatchException:function(I){if(this.done)throw I;var g=this;function C(C,e){return t.type="throw",t.arg=I,g.next=C,e&&(g.method="next",g.arg=A),!!e}for(var e=this.tryEntries.length-1;e>=0;--e){var c=this.tryEntries[e],t=c.completion;if("root"===c.tryLoc)return C("end");if(c.tryLoc<=this.prev){var s=l.call(c,"catchLoc"),Z=l.call(c,"finallyLoc");if(s&&Z){if(this.prev<c.catchLoc)return C(c.catchLoc,!0);if(this.prev<c.finallyLoc)return C(c.finallyLoc)}else if(s){if(this.prev<c.catchLoc)return C(c.catchLoc,!0)}else{if(!Z)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return C(c.finallyLoc)}}}},abrupt:function(I,g){for(var C=this.tryEntries.length-1;C>=0;--C){var A=this.tryEntries[C];if(A.tryLoc<=this.prev&&l.call(A,"finallyLoc")&&this.prev<A.finallyLoc){var e=A;break}}e&&("break"===I||"continue"===I)&&e.tryLoc<=g&&g<=e.finallyLoc&&(e=null);var c=e?e.completion:{};return c.type=I,c.arg=g,e?(this.method="next",this.next=e.finallyLoc,B):this.complete(c)},complete:function(I,g){if("throw"===I.type)throw I.arg;return"break"===I.type||"continue"===I.type?this.next=I.arg:"return"===I.type?(this.rval=this.arg=I.arg,this.method="return",this.next="end"):"normal"===I.type&&g&&(this.next=g),B},finish:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.finallyLoc===I)return this.complete(C.completion,C.afterLoc),S(C),B}},catch:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc===I){var A=C.completion;if("throw"===A.type){var e=A.arg;S(C)}return e}}throw new Error("illegal catch attempt")},delegateYield:function(I,g,C){return this.delegate={iterator:w(I),resultName:g,nextLoc:C},"next"===this.method&&(this.arg=A),B}},e}I.exports=C,I.exports.__esModule=!0,I.exports.default=I.exports}(l);var Z=(0,l.exports)(),d=Z;try{regeneratorRuntime=Z}catch(I){"object"==typeof globalThis?globalThis.regeneratorRuntime=Z:Function("r","regeneratorRuntime = r")(Z)}var b=c(d);const i={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},r={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},o={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},n={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},m={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};class G{static getFirstMatch(I,g){const C=g.match(I);return C&&C.length>0&&C[1]||""}static getSecondMatch(I,g){const C=g.match(I);return C&&C.length>1&&C[2]||""}static matchAndReturnConst(I,g,C){if(I.test(g))return C}static getWindowsVersionName(I){switch(I){case"NT":return"NT";case"XP":case"NT 5.1":return"XP";case"NT 5.0":return"2000";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}static getMacOSVersionName(I){const g=I.split(".").splice(0,2).map((I=>parseInt(I,10)||0));if(g.push(0),10===g[0])switch(g[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}}static getAndroidVersionName(I){const g=I.split(".").splice(0,2).map((I=>parseInt(I,10)||0));if(g.push(0),!(1===g[0]&&g[1]<5))return 1===g[0]&&g[1]<6?"Cupcake":1===g[0]&&g[1]>=6?"Donut":2===g[0]&&g[1]<2?"Eclair":2===g[0]&&2===g[1]?"Froyo":2===g[0]&&g[1]>2?"Gingerbread":3===g[0]?"Honeycomb":4===g[0]&&g[1]<1?"Ice Cream Sandwich":4===g[0]&&g[1]<4?"Jelly Bean":4===g[0]&&g[1]>=4?"KitKat":5===g[0]?"Lollipop":6===g[0]?"Marshmallow":7===g[0]?"Nougat":8===g[0]?"Oreo":9===g[0]?"Pie":void 0}static getVersionPrecision(I){return I.split(".").length}static compareVersions(I,g,C=!1){const A=G.getVersionPrecision(I),e=G.getVersionPrecision(g);let c=Math.max(A,e),l=0;const t=G.map([I,g],(I=>{const g=c-G.getVersionPrecision(I),C=I+new Array(g+1).join(".0");return G.map(C.split("."),(I=>new Array(20-I.length).join("0")+I)).reverse()}));for(C&&(l=c-Math.min(A,e)),c-=1;c>=l;){if(t[0][c]>t[1][c])return 1;if(t[0][c]===t[1][c]){if(c===l)return 0;c-=1}else if(t[0][c]<t[1][c])return-1}}static map(I,g){const C=[];let A;if(Array.prototype.map)return Array.prototype.map.call(I,g);for(A=0;A<I.length;A+=1)C.push(g(I[A]));return C}static find(I,g){let C,A;if(Array.prototype.find)return Array.prototype.find.call(I,g);for(C=0,A=I.length;C<A;C+=1){const A=I[C];if(g(A,C))return A}}static assign(I,...g){const C=I;let A,e;if(Object.assign)return Object.assign(I,...g);for(A=0,e=g.length;A<e;A+=1){const I=g[A];if("object"==typeof I&&null!==I){Object.keys(I).forEach((g=>{C[g]=I[g]}))}}return I}static getBrowserAlias(I){return i[I]}static getBrowserTypeByAlias(I){return r[I]||""}}const a=/version\/(\d+(\.?_?\d+)+)/i,B=[{test:[/googlebot/i],describe(I){const g={name:"Googlebot"},C=G.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/opera/i],describe(I){const g={name:"Opera"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/opr\/|opios/i],describe(I){const g={name:"Opera"},C=G.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/SamsungBrowser/i],describe(I){const g={name:"Samsung Internet for Android"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/Whale/i],describe(I){const g={name:"NAVER Whale Browser"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/MZBrowser/i],describe(I){const g={name:"MZ Browser"},C=G.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/focus/i],describe(I){const g={name:"Focus"},C=G.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/swing/i],describe(I){const g={name:"Swing"},C=G.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/coast/i],describe(I){const g={name:"Opera Coast"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe(I){const g={name:"Opera Touch"},C=G.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/yabrowser/i],describe(I){const g={name:"Yandex Browser"},C=G.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/ucbrowser/i],describe(I){const g={name:"UC Browser"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/Maxthon|mxios/i],describe(I){const g={name:"Maxthon"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/epiphany/i],describe(I){const g={name:"Epiphany"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/puffin/i],describe(I){const g={name:"Puffin"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/sleipnir/i],describe(I){const g={name:"Sleipnir"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/k-meleon/i],describe(I){const g={name:"K-Meleon"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/micromessenger/i],describe(I){const g={name:"WeChat"},C=G.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/qqbrowser/i],describe(I){const g={name:/qqbrowserlite/i.test(I)?"QQ Browser Lite":"QQ Browser"},C=G.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/msie|trident/i],describe(I){const g={name:"Internet Explorer"},C=G.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/\sedg\//i],describe(I){const g={name:"Microsoft Edge"},C=G.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/edg([ea]|ios)/i],describe(I){const g={name:"Microsoft Edge"},C=G.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/vivaldi/i],describe(I){const g={name:"Vivaldi"},C=G.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/seamonkey/i],describe(I){const g={name:"SeaMonkey"},C=G.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/sailfish/i],describe(I){const g={name:"Sailfish"},C=G.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,I);return C&&(g.version=C),g}},{test:[/silk/i],describe(I){const g={name:"Amazon Silk"},C=G.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/phantom/i],describe(I){const g={name:"PhantomJS"},C=G.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/slimerjs/i],describe(I){const g={name:"SlimerJS"},C=G.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(I){const g={name:"BlackBerry"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/(web|hpw)[o0]s/i],describe(I){const g={name:"WebOS Browser"},C=G.getFirstMatch(a,I)||G.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/bada/i],describe(I){const g={name:"Bada"},C=G.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/tizen/i],describe(I){const g={name:"Tizen"},C=G.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/qupzilla/i],describe(I){const g={name:"QupZilla"},C=G.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/firefox|iceweasel|fxios/i],describe(I){const g={name:"Firefox"},C=G.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/electron/i],describe(I){const g={name:"Electron"},C=G.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/MiuiBrowser/i],describe(I){const g={name:"Miui"},C=G.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/chromium/i],describe(I){const g={name:"Chromium"},C=G.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,I)||G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/chrome|crios|crmo/i],describe(I){const g={name:"Chrome"},C=G.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/GSA/i],describe(I){const g={name:"Google Search"},C=G.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test(I){const g=!I.test(/like android/i),C=I.test(/android/i);return g&&C},describe(I){const g={name:"Android Browser"},C=G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/playstation 4/i],describe(I){const g={name:"PlayStation 4"},C=G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/safari|applewebkit/i],describe(I){const g={name:"Safari"},C=G.getFirstMatch(a,I);return C&&(g.version=C),g}},{test:[/.*/i],describe(I){const g=-1!==I.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:G.getFirstMatch(g,I),version:G.getSecondMatch(g,I)}}}];var y=[{test:[/Roku\/DVP/],describe(I){const g=G.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,I);return{name:n.Roku,version:g}}},{test:[/windows phone/i],describe(I){const g=G.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,I);return{name:n.WindowsPhone,version:g}}},{test:[/windows /i],describe(I){const g=G.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,I),C=G.getWindowsVersionName(g);return{name:n.Windows,version:g,versionName:C}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe(I){const g={name:n.iOS},C=G.getSecondMatch(/(Version\/)(\d[\d.]+)/,I);return C&&(g.version=C),g}},{test:[/macintosh/i],describe(I){const g=G.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,I).replace(/[_\s]/g,"."),C=G.getMacOSVersionName(g),A={name:n.MacOS,version:g};return C&&(A.versionName=C),A}},{test:[/(ipod|iphone|ipad)/i],describe(I){const g=G.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,I).replace(/[_\s]/g,".");return{name:n.iOS,version:g}}},{test(I){const g=!I.test(/like android/i),C=I.test(/android/i);return g&&C},describe(I){const g=G.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,I),C=G.getAndroidVersionName(g),A={name:n.Android,version:g};return C&&(A.versionName=C),A}},{test:[/(web|hpw)[o0]s/i],describe(I){const g=G.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,I),C={name:n.WebOS};return g&&g.length&&(C.version=g),C}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(I){const g=G.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,I)||G.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,I)||G.getFirstMatch(/\bbb(\d+)/i,I);return{name:n.BlackBerry,version:g}}},{test:[/bada/i],describe(I){const g=G.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,I);return{name:n.Bada,version:g}}},{test:[/tizen/i],describe(I){const g=G.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,I);return{name:n.Tizen,version:g}}},{test:[/linux/i],describe:()=>({name:n.Linux})},{test:[/CrOS/],describe:()=>({name:n.ChromeOS})},{test:[/PlayStation 4/],describe(I){const g=G.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,I);return{name:n.PlayStation4,version:g}}}],V=[{test:[/googlebot/i],describe:()=>({type:"bot",vendor:"Google"})},{test:[/huawei/i],describe(I){const g=G.getFirstMatch(/(can-l01)/i,I)&&"Nova",C={type:o.mobile,vendor:"Huawei"};return g&&(C.model=g),C}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:()=>({type:o.tablet,vendor:"Nexus"})},{test:[/ipad/i],describe:()=>({type:o.tablet,vendor:"Apple",model:"iPad"})},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:()=>({type:o.tablet,vendor:"Apple",model:"iPad"})},{test:[/kftt build/i],describe:()=>({type:o.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"})},{test:[/silk/i],describe:()=>({type:o.tablet,vendor:"Amazon"})},{test:[/tablet(?! pc)/i],describe:()=>({type:o.tablet})},{test(I){const g=I.test(/ipod|iphone/i),C=I.test(/like (ipod|iphone)/i);return g&&!C},describe(I){const g=G.getFirstMatch(/(ipod|iphone)/i,I);return{type:o.mobile,vendor:"Apple",model:g}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:()=>({type:o.mobile,vendor:"Nexus"})},{test:[/[^-]mobi/i],describe:()=>({type:o.mobile})},{test:I=>"blackberry"===I.getBrowserName(!0),describe:()=>({type:o.mobile,vendor:"BlackBerry"})},{test:I=>"bada"===I.getBrowserName(!0),describe:()=>({type:o.mobile})},{test:I=>"windows phone"===I.getBrowserName(),describe:()=>({type:o.mobile,vendor:"Microsoft"})},{test(I){const g=Number(String(I.getOSVersion()).split(".")[0]);return"android"===I.getOSName(!0)&&g>=3},describe:()=>({type:o.tablet})},{test:I=>"android"===I.getOSName(!0),describe:()=>({type:o.mobile})},{test:I=>"macos"===I.getOSName(!0),describe:()=>({type:o.desktop,vendor:"Apple"})},{test:I=>"windows"===I.getOSName(!0),describe:()=>({type:o.desktop})},{test:I=>"linux"===I.getOSName(!0),describe:()=>({type:o.desktop})},{test:I=>"playstation 4"===I.getOSName(!0),describe:()=>({type:o.tv})},{test:I=>"roku"===I.getOSName(!0),describe:()=>({type:o.tv})}],W=[{test:I=>"microsoft edge"===I.getBrowserName(!0),describe(I){if(/\sedg\//i.test(I))return{name:m.Blink};const g=G.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,I);return{name:m.EdgeHTML,version:g}}},{test:[/trident/i],describe(I){const g={name:m.Trident},C=G.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:I=>I.test(/presto/i),describe(I){const g={name:m.Presto},C=G.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test(I){const g=I.test(/gecko/i),C=I.test(/like gecko/i);return g&&!C},describe(I){const g={name:m.Gecko},C=G.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}},{test:[/(apple)?webkit\/537\.36/i],describe:()=>({name:m.Blink})},{test:[/(apple)?webkit/i],describe(I){const g={name:m.WebKit},C=G.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,I);return C&&(g.version=C),g}}];class u{constructor(I,g=!1){if(null==I||""===I)throw new Error("UserAgent parameter can't be empty");this._ua=I,this.parsedResult={},!0!==g&&this.parse()}getUA(){return this._ua}test(I){return I.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const I=G.find(B,(I=>{if("function"==typeof I.test)return I.test(this);if(I.test instanceof Array)return I.test.some((I=>this.test(I)));throw new Error("Browser's test function is not valid")}));return I&&(this.parsedResult.browser=I.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(I){return I?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const I=G.find(y,(I=>{if("function"==typeof I.test)return I.test(this);if(I.test instanceof Array)return I.test.some((I=>this.test(I)));throw new Error("Browser's test function is not valid")}));return I&&(this.parsedResult.os=I.describe(this.getUA())),this.parsedResult.os}getOSName(I){const{name:g}=this.getOS();return I?String(g).toLowerCase()||"":g||""}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(I=!1){const{type:g}=this.getPlatform();return I?String(g).toLowerCase()||"":g||""}parsePlatform(){this.parsedResult.platform={};const I=G.find(V,(I=>{if("function"==typeof I.test)return I.test(this);if(I.test instanceof Array)return I.test.some((I=>this.test(I)));throw new Error("Browser's test function is not valid")}));return I&&(this.parsedResult.platform=I.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(I){return I?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""}parseEngine(){this.parsedResult.engine={};const I=G.find(W,(I=>{if("function"==typeof I.test)return I.test(this);if(I.test instanceof Array)return I.test.some((I=>this.test(I)));throw new Error("Browser's test function is not valid")}));return I&&(this.parsedResult.engine=I.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return G.assign({},this.parsedResult)}satisfies(I){const g={};let C=0;const A={};let e=0;if(Object.keys(I).forEach((c=>{const l=I[c];"string"==typeof l?(A[c]=l,e+=1):"object"==typeof l&&(g[c]=l,C+=1)})),C>0){const I=Object.keys(g),C=G.find(I,(I=>this.isOS(I)));if(C){const I=this.satisfies(g[C]);if(void 0!==I)return I}const A=G.find(I,(I=>this.isPlatform(I)));if(A){const I=this.satisfies(g[A]);if(void 0!==I)return I}}if(e>0){const I=Object.keys(A),g=G.find(I,(I=>this.isBrowser(I,!0)));if(void 0!==g)return this.compareVersion(A[g])}}isBrowser(I,g=!1){const C=this.getBrowserName().toLowerCase();let A=I.toLowerCase();const e=G.getBrowserTypeByAlias(A);return g&&e&&(A=e.toLowerCase()),A===C}compareVersion(I){let g=[0],C=I,A=!1;const e=this.getBrowserVersion();if("string"==typeof e)return">"===I[0]||"<"===I[0]?(C=I.substr(1),"="===I[1]?(A=!0,C=I.substr(2)):g=[],">"===I[0]?g.push(1):g.push(-1)):"="===I[0]?C=I.substr(1):"~"===I[0]&&(A=!0,C=I.substr(1)),g.indexOf(G.compareVersions(e,C,A))>-1}isOS(I){return this.getOSName(!0)===String(I).toLowerCase()}isPlatform(I){return this.getPlatformType(!0)===String(I).toLowerCase()}isEngine(I){return this.getEngineName(!0)===String(I).toLowerCase()}is(I,g=!1){return this.isBrowser(I,g)||this.isOS(I)||this.isPlatform(I)}some(I=[]){return I.some((I=>this.is(I)))}}
/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */class R{static getParser(I,g=!1){if("string"!=typeof I)throw new Error("UserAgent should be a string");return new u(I,g)}static parse(I){return new u(I).getResult()}static get BROWSER_MAP(){return r}static get ENGINE_MAP(){return m}static get OS_MAP(){return n}static get PLATFORMS_MAP(){return o}}var X={exports:{}},h={exports:{}};!function(I){function g(C){return I.exports=g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I.exports.__esModule=!0,I.exports.default=I.exports,g(C)}I.exports=g,I.exports.__esModule=!0,I.exports.default=I.exports}(h);var H=h.exports;!function(I){var g=H.default;function C(){I.exports=C=function(){return e},I.exports.__esModule=!0,I.exports.default=I.exports;var A,e={},c=Object.prototype,l=c.hasOwnProperty,t=Object.defineProperty||function(I,g,C){I[g]=C.value},s="function"==typeof Symbol?Symbol:{},Z=s.iterator||"@@iterator",d=s.asyncIterator||"@@asyncIterator",b=s.toStringTag||"@@toStringTag";function i(I,g,C){return Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}),I[g]}try{i({},"")}catch(A){i=function(I,g,C){return I[g]=C}}function r(I,g,C,A){var e=g&&g.prototype instanceof y?g:y,c=Object.create(e.prototype),l=new Y(A||[]);return t(c,"_invoke",{value:p(I,C,l)}),c}function o(I,g,C){try{return{type:"normal",arg:I.call(g,C)}}catch(I){return{type:"throw",arg:I}}}e.wrap=r;var n="suspendedStart",m="suspendedYield",G="executing",a="completed",B={};function y(){}function V(){}function W(){}var u={};i(u,Z,(function(){return this}));var R=Object.getPrototypeOf,X=R&&R(R(w([])));X&&X!==c&&l.call(X,Z)&&(u=X);var h=W.prototype=y.prototype=Object.create(u);function H(I){["next","throw","return"].forEach((function(g){i(I,g,(function(I){return this._invoke(g,I)}))}))}function k(I,C){function A(e,c,t,s){var Z=o(I[e],I,c);if("throw"!==Z.type){var d=Z.arg,b=d.value;return b&&"object"==g(b)&&l.call(b,"__await")?C.resolve(b.__await).then((function(I){A("next",I,t,s)}),(function(I){A("throw",I,t,s)})):C.resolve(b).then((function(I){d.value=I,t(d)}),(function(I){return A("throw",I,t,s)}))}s(Z.arg)}var e;t(this,"_invoke",{value:function(I,g){function c(){return new C((function(C,e){A(I,g,C,e)}))}return e=e?e.then(c,c):c()}})}function p(I,g,C){var e=n;return function(c,l){if(e===G)throw new Error("Generator is already running");if(e===a){if("throw"===c)throw l;return{value:A,done:!0}}for(C.method=c,C.arg=l;;){var t=C.delegate;if(t){var s=J(t,C);if(s){if(s===B)continue;return s}}if("next"===C.method)C.sent=C._sent=C.arg;else if("throw"===C.method){if(e===n)throw e=a,C.arg;C.dispatchException(C.arg)}else"return"===C.method&&C.abrupt("return",C.arg);e=G;var Z=o(I,g,C);if("normal"===Z.type){if(e=C.done?a:m,Z.arg===B)continue;return{value:Z.arg,done:C.done}}"throw"===Z.type&&(e=a,C.method="throw",C.arg=Z.arg)}}}function J(I,g){var C=g.method,e=I.iterator[C];if(e===A)return g.delegate=null,"throw"===C&&I.iterator.return&&(g.method="return",g.arg=A,J(I,g),"throw"===g.method)||"return"!==C&&(g.method="throw",g.arg=new TypeError("The iterator does not provide a '"+C+"' method")),B;var c=o(e,I.iterator,g.arg);if("throw"===c.type)return g.method="throw",g.arg=c.arg,g.delegate=null,B;var l=c.arg;return l?l.done?(g[I.resultName]=l.value,g.next=I.nextLoc,"return"!==g.method&&(g.method="next",g.arg=A),g.delegate=null,B):l:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,B)}function F(I){var g={tryLoc:I[0]};1 in I&&(g.catchLoc=I[1]),2 in I&&(g.finallyLoc=I[2],g.afterLoc=I[3]),this.tryEntries.push(g)}function S(I){var g=I.completion||{};g.type="normal",delete g.arg,I.completion=g}function Y(I){this.tryEntries=[{tryLoc:"root"}],I.forEach(F,this),this.reset(!0)}function w(I){if(I||""===I){var C=I[Z];if(C)return C.call(I);if("function"==typeof I.next)return I;if(!isNaN(I.length)){var e=-1,c=function g(){for(;++e<I.length;)if(l.call(I,e))return g.value=I[e],g.done=!1,g;return g.value=A,g.done=!0,g};return c.next=c}}throw new TypeError(g(I)+" is not iterable")}return V.prototype=W,t(h,"constructor",{value:W,configurable:!0}),t(W,"constructor",{value:V,configurable:!0}),V.displayName=i(W,b,"GeneratorFunction"),e.isGeneratorFunction=function(I){var g="function"==typeof I&&I.constructor;return!!g&&(g===V||"GeneratorFunction"===(g.displayName||g.name))},e.mark=function(I){return Object.setPrototypeOf?Object.setPrototypeOf(I,W):(I.__proto__=W,i(I,b,"GeneratorFunction")),I.prototype=Object.create(h),I},e.awrap=function(I){return{__await:I}},H(k.prototype),i(k.prototype,d,(function(){return this})),e.AsyncIterator=k,e.async=function(I,g,C,A,c){void 0===c&&(c=Promise);var l=new k(r(I,g,C,A),c);return e.isGeneratorFunction(g)?l:l.next().then((function(I){return I.done?I.value:l.next()}))},H(h),i(h,b,"Generator"),i(h,Z,(function(){return this})),i(h,"toString",(function(){return"[object Generator]"})),e.keys=function(I){var g=Object(I),C=[];for(var A in g)C.push(A);return C.reverse(),function I(){for(;C.length;){var A=C.pop();if(A in g)return I.value=A,I.done=!1,I}return I.done=!0,I}},e.values=w,Y.prototype={constructor:Y,reset:function(I){if(this.prev=0,this.next=0,this.sent=this._sent=A,this.done=!1,this.delegate=null,this.method="next",this.arg=A,this.tryEntries.forEach(S),!I)for(var g in this)"t"===g.charAt(0)&&l.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=A)},stop:function(){this.done=!0;var I=this.tryEntries[0].completion;if("throw"===I.type)throw I.arg;return this.rval},dispatchException:function(I){if(this.done)throw I;var g=this;function C(C,e){return t.type="throw",t.arg=I,g.next=C,e&&(g.method="next",g.arg=A),!!e}for(var e=this.tryEntries.length-1;e>=0;--e){var c=this.tryEntries[e],t=c.completion;if("root"===c.tryLoc)return C("end");if(c.tryLoc<=this.prev){var s=l.call(c,"catchLoc"),Z=l.call(c,"finallyLoc");if(s&&Z){if(this.prev<c.catchLoc)return C(c.catchLoc,!0);if(this.prev<c.finallyLoc)return C(c.finallyLoc)}else if(s){if(this.prev<c.catchLoc)return C(c.catchLoc,!0)}else{if(!Z)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return C(c.finallyLoc)}}}},abrupt:function(I,g){for(var C=this.tryEntries.length-1;C>=0;--C){var A=this.tryEntries[C];if(A.tryLoc<=this.prev&&l.call(A,"finallyLoc")&&this.prev<A.finallyLoc){var e=A;break}}e&&("break"===I||"continue"===I)&&e.tryLoc<=g&&g<=e.finallyLoc&&(e=null);var c=e?e.completion:{};return c.type=I,c.arg=g,e?(this.method="next",this.next=e.finallyLoc,B):this.complete(c)},complete:function(I,g){if("throw"===I.type)throw I.arg;return"break"===I.type||"continue"===I.type?this.next=I.arg:"return"===I.type?(this.rval=this.arg=I.arg,this.method="return",this.next="end"):"normal"===I.type&&g&&(this.next=g),B},finish:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.finallyLoc===I)return this.complete(C.completion,C.afterLoc),S(C),B}},catch:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc===I){var A=C.completion;if("throw"===A.type){var e=A.arg;S(C)}return e}}throw new Error("illegal catch attempt")},delegateYield:function(I,g,C){return this.delegate={iterator:w(I),resultName:g,nextLoc:C},"next"===this.method&&(this.arg=A),B}},e}I.exports=C,I.exports.__esModule=!0,I.exports.default=I.exports}(X);var k=(0,X.exports)();try{regeneratorRuntime=k}catch(I){"object"==typeof globalThis?globalThis.regeneratorRuntime=k:Function("r","regeneratorRuntime = r")(k)}function p(I){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},p(I)}function J(I){var g=function(I,g){if("object"!==p(I)||null===I)return I;var C=I[Symbol.toPrimitive];if(void 0!==C){var A=C.call(I,g||"default");if("object"!==p(A))return A;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===g?String:Number)(I)}(I,"string");return"symbol"===p(g)?g:String(g)}function F(I,g){for(var C=0;C<g.length;C++){var A=g[C];A.enumerable=A.enumerable||!1,A.configurable=!0,"value"in A&&(A.writable=!0),Object.defineProperty(I,J(A.key),A)}}function S(I){return I<0?I>>>0:I}function Y(I,g,C){var A=void 0===g?null:g,e=function(I,g){var C=atob(I);if(g){for(var A=new Uint8Array(C.length),e=0,c=C.length;e<c;++e)A[e]=C.charCodeAt(e);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}(I,void 0!==C&&C),c=e.indexOf("\n",10)+1,l=e.substring(c)+(A?"//# sourceMappingURL="+A:""),t=new Blob([l],{type:"application/javascript"});return URL.createObjectURL(t)}(function(){function I(){!function(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")}(this,I),this._path=""}var g,C,A;return g=I,A=[{key:"getPtr",value:function(g){if(I._filePtrs.has(g))return I._filePtrs.get(g);throw new Error("File instance not found.")}},{key:"setPtr",value:function(g,C){I._filePtrs.set(g,C)}},{key:"removePtr",value:function(g){I._filePtrs.delete(g)}}],(C=[{key:"meta",get:function(){if(void 0!==this._meta)return Object.assign({version:0},this._meta)}}])&&F(g.prototype,C),A&&F(g,A),Object.defineProperty(g,"prototype",{writable:!1}),I}())._filePtrs=new Map;var w,K,v,f,N,U=(w="",K=null,v=!1,function(I){return f=f||Y(w,K,v),new Worker(f,I)});function z(I,C){for(var A=0;A<C.length;A++){var e=C[A];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(I,g(e.key),e)}}function Q(I,g){var C="undefined"!=typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=function(I,g){if(!I)return;if("string"==typeof I)return M(I,g);var C=Object.prototype.toString.call(I).slice(8,-1);"Object"===C&&I.constructor&&(C=I.constructor.name);if("Map"===C||"Set"===C)return Array.from(I);if("Arguments"===C||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return M(I,g)}(I))||g&&I&&"number"==typeof I.length){C&&(I=C);var A=0,e=function(){};return{s:e,n:function(){return A>=I.length?{done:!0}:{done:!1,value:I[A++]}},e:function(I){throw I},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,l=!0,t=!1;return{s:function(){C=C.call(I)},n:function(){var I=C.next();return l=I.done,I},e:function(I){t=!0,c=I},f:function(){try{l||null==C.return||C.return()}finally{if(t)throw c}}}}function M(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A}!function(I){I[I.INIT=0]="INIT",I[I.ALLOC=1]="ALLOC",I[I.FREE=2]="FREE",I[I.COPY_TO_XPU=3]="COPY_TO_XPU",I[I.COPY_FROM_XPU=4]="COPY_FROM_XPU",I[I.MEMSET=5]="MEMSET",I[I.TIMER_START=6]="TIMER_START",I[I.TIMER_STOP=7]="TIMER_STOP",I[I.MATRIX_VECTOR_MULTIPLY=8]="MATRIX_VECTOR_MULTIPLY",I[I.SYNC_VECTOR=9]="SYNC_VECTOR"}(N||(N={}));var E=function(){function I(){!function(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")}(this,I)}var g,C,A;return g=I,A=[{key:"addXpu",value:function(g,C){I.xpuObjects.set(g,C)}},{key:"getXpu",value:function(g){return I.xpuObjects.get(g)}},{key:"hasXpu",value:function(g){return I.xpuObjects.has(g)}},{key:"removeXpu",value:function(g){if(I.xpuObjects.has(g)){var C,A=Q(I.xpuObjects.get(g).deviceMem);try{for(A.s();!(C=A.n()).done;){var e=C.value;I.memoryObjects.delete(e)}}catch(I){A.e(I)}finally{A.f()}I.xpuObjects.delete(g)}}},{key:"addMemory",value:function(g,C){I.memoryObjects.set(g,C),I.xpuObjects.get(C.objAddress).deviceMem.add(g)}},{key:"getMemory",value:function(g){return I.memoryObjects.get(g)}},{key:"hasMemory",value:function(g){return I.memoryObjects.has(g)}},{key:"removeMemory",value:function(g){I.hasMemory(g)&&I.xpuObjects.get(I.getMemory(g).objAddress).deviceMem.delete(g),I.memoryObjects.delete(g)}}],(C=null)&&z(g.prototype,C),A&&z(g,A),Object.defineProperty(g,"prototype",{writable:!1}),I}();C(E,"xpuObjects",new Map),C(E,"memoryObjects",new Map);var x,L=function(I,g,C){return I.postMessage(g,C),new Promise((function(g,C){I.onmessage=function(I){switch(I.data.command){case"ok":g(I.data.result);break;case"failed":case"error":C(I.data.message);break;default:C("Unrecognized command: ".concat(I.data.command))}}}))};!function(I){I[I.ATTENTION_PRECOMPUTE_ENCODING=200]="ATTENTION_PRECOMPUTE_ENCODING",I[I.ATTENTION_ENCODE=201]="ATTENTION_ENCODE",I[I.ATTENTION_ATTEND=202]="ATTENTION_ATTEND",I[I.ATTENTION_UPDATE_KEYS=203]="ATTENTION_UPDATE_KEYS",I[I.ATTENTION_UPDATE_VALUES=204]="ATTENTION_UPDATE_VALUES",I[I.ATTENTION_TRANSPOSE_QUERY=205]="ATTENTION_TRANSPOSE_QUERY"}(x||(x={}));var T;C(C(C(C(C(C({},x.ATTENTION_PRECOMPUTE_ENCODING,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.encodingAddress,c=I.dimension,l=I.steps,t=I.theta;(0,C.pv_picollm_attention_precompute_encoding)(A.get(e).workerMemAddress,c,l,t),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),x.ATTENTION_ENCODE,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.xAddress,c=I.newEncodingAddress,l=I.n,t=I.numHeads,s=I.ropeInterleaved,Z=I.headDimension,d=I.ropeDimension,b=I.position;(0,C.pv_picollm_attention_encode)(A.get(e).workerMemAddress,A.get(c).workerMemAddress,l,t,s,Z,d,b),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),x.ATTENTION_ATTEND,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.numHeads,c=I.numKvHeads,l=I.windowLength,t=I.headDimension,s=I.keysAddress,Z=I.keyInterceptsAddress,d=I.keySlopesAddress,b=I.valuesAddress,i=I.valueInterceptsAddress,r=I.valueSlopesAddress,o=I.position,n=I.queryAddress,m=I.n,G=I.outputAddress;(0,C.pv_picollm_attention_attend)(e,c,l,t,A.get(s).workerMemAddress,A.get(Z).workerMemAddress,A.get(d).workerMemAddress,A.get(b).workerMemAddress,A.get(i).workerMemAddress,A.get(r).workerMemAddress,o,A.get(n).workerMemAddress,m,A.get(G).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),x.ATTENTION_UPDATE_KEYS,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.numKvHeads,c=I.windowLength,l=I.headDimension,t=I.keysAddress,s=I.keyInterceptsAddress,Z=I.keySlopesAddress,d=I.position,b=I.n,i=I.tfAddress;(0,C.pv_picollm_attention_update_keys)(e,c,l,A.get(t).workerMemAddress,A.get(s).workerMemAddress,A.get(Z).workerMemAddress,d,b,A.get(i).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),x.ATTENTION_UPDATE_VALUES,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.numKvHeads,c=I.windowLength,l=I.headDimension,t=I.valuesAddress,s=I.valueInterceptsAddress,Z=I.valueSlopesAddress,d=I.position,b=I.n,i=I.tfAddress;(0,C.pv_picollm_attention_update_values)(e,c,l,A.get(t).workerMemAddress,A.get(s).workerMemAddress,A.get(Z).workerMemAddress,d,b,A.get(i).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),x.ATTENTION_TRANSPOSE_QUERY,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.tfAddress,l=I.hfAddress,t=I.numHeads,s=I.headDimension;(0,C.pv_picollm_attention_transpose_query)(e,A.get(c).workerMemAddress,A.get(l).workerMemAddress,t,s),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.FEED_FORWARD_SILU=300]="FEED_FORWARD_SILU",I[I.FEED_FORWARD_GELU=301]="FEED_FORWARD_GELU",I[I.FEED_FORWARD_ALMOST_GELU=302]="FEED_FORWARD_ALMOST_GELU",I[I.FEED_FORWARD_MULTIPLY_BUFFERS=303]="FEED_FORWARD_MULTIPLY_BUFFERS"}(T||(T={}));var D;C(C(C(C({},T.FEED_FORWARD_SILU,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.xAddress;(0,C.pv_picollm_feed_forward_silu)(e,A.get(c).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),T.FEED_FORWARD_GELU,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.xAddress;(0,C.pv_picollm_feed_forward_gelu)(e,A.get(c).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),T.FEED_FORWARD_ALMOST_GELU,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.xAddress;(0,C.pv_picollm_feed_forward_almost_gelu)(e,A.get(c).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),T.FEED_FORWARD_MULTIPLY_BUFFERS,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.xAddress,l=I.yAddress;(0,C.pv_picollm_feed_forward_multiply_buffers)(e,A.get(c).workerMemAddress,A.get(l).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.GATE_FORWARD=400]="GATE_FORWARD"}(D||(D={}));var P;C({},D.GATE_FORWARD,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.k,l=I.numExperts,t=I.indicesAddress,s=I.weightsAddress,Z=I.yAddress;(0,C.pv_picollm_gate_forward)(e,c,l,A.get(t).workerMemAddress,A.get(s).workerMemAddress,A.get(Z).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.ADD_TO_BUFFER=500]="ADD_TO_BUFFER",I[I.MULTIPLY_WEIGHT_AND_ADD_TO_BUFFER=501]="MULTIPLY_WEIGHT_AND_ADD_TO_BUFFER",I[I.ADD_BUFFERS=502]="ADD_BUFFERS"}(P||(P={}));var O;C(C(C({},P.ADD_TO_BUFFER,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.xAddress,l=I.bufferAddress;(0,C.pv_picollm_moe_transformer_add_to_buffer)(e,A.get(c).workerMemAddress,A.get(l).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),P.MULTIPLY_WEIGHT_AND_ADD_TO_BUFFER,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.weightsIndex,l=I.yIndex,t=I.weightsAddress,s=I.xAddress,Z=I.yAddress;(0,C.pv_picollm_moe_transformer_multiply_weight_and_add_to_buffer)(e,c,l,A.get(t).workerMemAddress,A.get(s).workerMemAddress,A.get(Z).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),P.ADD_BUFFERS,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.buffer1Address,l=I.buffer2Address,t=I.yAddress;(0,C.pv_picollm_moe_transformer_add_buffers)(e,A.get(c).workerMemAddress,A.get(l).workerMemAddress,A.get(t).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.NORM_FORWARD=600]="NORM_FORWARD"}(O||(O={}));var _;C({},O.NORM_FORWARD,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.dimension,c=I.eps,l=I.weightAddress,t=I.n,s=I.xOffset,Z=I.xAddress,d=I.yOffset,b=I.yAddress;(0,C.pv_picollm_norm_forward)(e,c,A.get(l).workerMemAddress,t,A.get(Z).workerMemAddress+s,A.get(b).workerMemAddress+d),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.NORM_LAYER_FORWARD=800]="NORM_LAYER_FORWARD"}(_||(_={}));var j;C({},_.NORM_LAYER_FORWARD,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.dimension,c=I.eps,l=I.weightAddress,t=I.biasAddress,s=I.n,Z=I.xOffset,d=I.xAddress,b=I.yOffset,i=I.yAddress;(0,C.pv_picollm_norm_layer_forward)(e,c,A.get(l).workerMemAddress,A.get(t).workerMemAddress,s,A.get(d).workerMemAddress+Z,A.get(i).workerMemAddress+b),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.ADD_TO_BUFFER=700]="ADD_TO_BUFFER",I[I.ADD_BUFFERS=701]="ADD_BUFFERS"}(j||(j={}));var q;C(C({},j.ADD_TO_BUFFER,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.xAddress,l=I.bufferAddress;(0,C.pv_picollm_transformer_add_to_buffer)(e,A.get(c).workerMemAddress,A.get(l).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),j.ADD_BUFFERS,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.buffer1Address,l=I.buffer2Address,t=I.yAddress;(0,C.pv_picollm_transformer_add_buffers)(e,A.get(c).workerMemAddress,A.get(l).workerMemAddress,A.get(t).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),function(I){I[I.WEIGHT_BLOCK_MIXED_16X8_PREPROCESS_BLOCKS=100]="WEIGHT_BLOCK_MIXED_16X8_PREPROCESS_BLOCKS",I[I.WEIGHT_BLOCK_MIXED_16X8_FORWARD_SINGLE=101]="WEIGHT_BLOCK_MIXED_16X8_FORWARD_SINGLE",I[I.WEIGHT_BLOCK_MIXED_16X8_FORWARD_MULTIPLE=102]="WEIGHT_BLOCK_MIXED_16X8_FORWARD_MULTIPLE",I[I.WEIGHT_BLOCK_MIXED_16X8_ADD_BIAS=103]="WEIGHT_BLOCK_MIXED_16X8_ADD_BIAS",I[I.WEIGHT_FLOAT_FORWARD=104]="WEIGHT_FLOAT_FORWARD"}(q||(q={}));function $(I,g){var C=Object.keys(I);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(I);g&&(A=A.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),C.push.apply(C,A)}return C}function II(I){for(var g=1;g<arguments.length;g++){var A=null!=arguments[g]?arguments[g]:{};g%2?$(Object(A),!0).forEach((function(g){C(I,g,A[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(A)):$(Object(A)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(A,g))}))}return I}function gI(I,g){var C="undefined"!=typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=function(I,g){if(!I)return;if("string"==typeof I)return CI(I,g);var C=Object.prototype.toString.call(I).slice(8,-1);"Object"===C&&I.constructor&&(C=I.constructor.name);if("Map"===C||"Set"===C)return Array.from(I);if("Arguments"===C||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return CI(I,g)}(I))||g&&I&&"number"==typeof I.length){C&&(I=C);var A=0,e=function(){};return{s:e,n:function(){return A>=I.length?{done:!0}:{done:!1,value:I[A++]}},e:function(I){throw I},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,l=!0,t=!1;return{s:function(){C=C.call(I)},n:function(){var I=C.next();return l=I.done,I},e:function(I){t=!0,c=I},f:function(){try{l||null==C.return||C.return()}finally{if(t)throw c}}}}function CI(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A}C(C(C(C(C({},q.WEIGHT_BLOCK_MIXED_16X8_PREPROCESS_BLOCKS,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=g.memory,c=I.shape,l=I.bitDepths,t=I.bitDepthStarts,s=I.blocksAddress,Z=C.aligned_alloc,d=C.free,b=C.pv_picollm_weight_block_mixed_16x8_preprocess_blocks;if(!A.has(s))return void self.postMessage({command:"ok"});var i=A.get(s).workerMemAddress,r=Z(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*c.length),o=Z(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*l.length),n=Z(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*t.length),m=new Int32Array(e.buffer);m.set(c,r/Int32Array.BYTES_PER_ELEMENT),m.set(l,o/Int32Array.BYTES_PER_ELEMENT),m.set(t,n/Int32Array.BYTES_PER_ELEMENT),b(r,l.length,o,n,i),d(r),d(o),d(n),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),q.WEIGHT_BLOCK_MIXED_16X8_FORWARD_SINGLE,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=g.memory,c=I.shape,l=I.indicesAddress,t=I.bitDepthStarts,s=I.bitDepths,Z=I.metasAddress,d=I.blocksAddress,b=I.xOffset,i=I.xAddress,r=I.yAddress,o=C.aligned_alloc,n=C.free,m=C.pv_picollm_weight_block_mixed_16x8_forward_single;if(!(A.has(Z)&&A.has(d)&&A.has(i)&&A.has(r)&&A.has(l)))return void self.postMessage({command:"ok"});var G=A.get(l).workerMemAddress,a=A.get(Z).workerMemAddress,B=A.get(d).workerMemAddress,y=A.get(i).workerMemAddress,V=A.get(r).workerMemAddress,W=o(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*c.length),u=o(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*t.length),R=o(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*s.length),X=new Int32Array(e.buffer);X.set(c,W/Int32Array.BYTES_PER_ELEMENT),X.set(t,u/Int32Array.BYTES_PER_ELEMENT),X.set(s,R/Int32Array.BYTES_PER_ELEMENT),m(W,G,s.length,u,R,a,B,y+b,V),n(W),n(u),n(R),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),q.WEIGHT_BLOCK_MIXED_16X8_FORWARD_MULTIPLE,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=g.memory,c=I.shape,l=I.indicesAddress,t=I.bitDepthStarts,s=I.bitDepths,Z=I.metasAddress,d=I.blocksAddress,b=I.n,i=I.xOffset,r=I.xAddress,o=I.yAddress,n=C.aligned_alloc,m=C.free,G=C.pv_picollm_weight_block_mixed_16x8_forward_multiple;if(!(A.has(Z)&&A.has(d)&&A.has(r)&&A.has(o)&&A.has(l)))return void self.postMessage({command:"ok"});var a=A.get(l).workerMemAddress,B=A.get(Z).workerMemAddress,y=A.get(d).workerMemAddress,V=A.get(r).workerMemAddress,W=A.get(o).workerMemAddress,u=n(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*c.length),R=n(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*t.length),X=n(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT*s.length),h=new Int32Array(e.buffer);h.set(c,u/Int32Array.BYTES_PER_ELEMENT),h.set(t,R/Int32Array.BYTES_PER_ELEMENT),h.set(s,X/Int32Array.BYTES_PER_ELEMENT),G(u,a,s.length,R,X,B,y,b,V+i,W),m(u),m(R),m(X),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),q.WEIGHT_BLOCK_MIXED_16X8_ADD_BIAS,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.dimension,l=I.yAddress,t=I.biasAddress,s=(C.free,C.pv_picollm_weight_block_mixed_16x8_add_bias);if(!A.has(l)||!A.has(t))return void self.postMessage({command:"ok"});s(e,c,A.get(l).workerMemAddress,A.get(t).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}})),q.WEIGHT_FLOAT_FORWARD,(function(I){try{var g=I.globals,C=g.exports,A=g.memAlloc,e=I.n,c=I.nc,l=I.nr,t=I.wAddress,s=I.xOffset,Z=I.xAddress,d=I.yAddress,b=C.pv_picollm_weight_float_forward;if(!A.has(t)||!A.has(Z)||!A.has(d))return void self.postMessage({command:"ok"});b(e,c,l,A.get(t).workerMemAddress,A.get(Z).workerMemAddress+s,A.get(d).workerMemAddress),self.postMessage({command:"ok"})}catch(I){self.postMessage({command:"error",message:I.message})}}));var AI=function(I,g){var C=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},A=function(){var g=e(b.mark((function g(A,e,c,l,t){var s,Z,d,i,r,o,m,G,a,B,y,V,W;return b.wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return A=S(A),e=S(e),c=S(c),l=S(l),t=S(t),s=n.aligned_alloc,Z=R.getParser(navigator.userAgent),d=new Uint8Array(I.buffer),i=Z.getBrowserName(),g.next=11,s(Uint8Array.BYTES_PER_ELEMENT,(i.length+1)*Uint8Array.BYTES_PER_ELEMENT);case 11:if(0!==(r=g.sent)){g.next=15;break}return C(t,-1),g.abrupt("return");case 15:for(C(A,r),o=0;o<i.length;o++)d[r+o]=i.charCodeAt(o);return d[r+i.length]=0,m=Z.getBrowserVersion(),g.next=21,s(Uint8Array.BYTES_PER_ELEMENT,(m.length+1)*Uint8Array.BYTES_PER_ELEMENT);case 21:if(0!==(G=g.sent)){g.next=25;break}return C(t,-1),g.abrupt("return");case 25:for(C(e,G),a=0;a<m.length;a++)d[G+a]=m.charCodeAt(a);return d[G+m.length]=0,B=Z.getOSName(),g.next=31,s(Uint8Array.BYTES_PER_ELEMENT,(B.length+1)*Uint8Array.BYTES_PER_ELEMENT);case 31:if(0!==(y=g.sent)){g.next=35;break}return C(t,-1),g.abrupt("return");case 35:for(C(c,y),V=0;V<B.length;V++)d[y+V]=B.charCodeAt(V);d[y+B.length]=0,W=window.navigator.hardwareConcurrency,C(l,W||1),C(t,0);case 41:case"end":return g.stop()}}),g)})));return function(I,C,A,e,c){return g.apply(this,arguments)}}(),c=function(){var I=e(b.mark((function I(A,e,c){var l,t,s,Z,d;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(A=S(A),c=S(c),g){I.next=5;break}return C(c,-1),I.abrupt("return");case 5:l=window.navigator.hardwareConcurrency,t=l&&l<e?l:e,s=[],Z=0;case 9:if(!(Z<t)){I.next=17;break}return d=new U,s.push(d),I.next=14,L(d,{action:N.INIT,wasm:g});case 14:Z++,I.next=9;break;case 17:E.addXpu(A,{deviceMem:new Set,numWorkers:t,workers:s}),C(c,0);case 19:case"end":return I.stop()}}),I)})));return function(g,C,A){return I.apply(this,arguments)}}(),l=function(){var I=e(b.mark((function I(g,A,e,c,l,t){var s,Z,d,i,r,o,n;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(g=S(g),A=S(A),t=S(t),s=E.getXpu(g)){I.next=7;break}return C(t,-1),I.abrupt("return");case 7:if(Z=0===c?s.numWorkers:c,(d=1===l)||e%Z==0){I.next=13;break}return C(t,-1),console.error("Failed to allocate memory: alloc size ".concat(e," must be divisible by batch ").concat(Z,".")),I.abrupt("return");case 13:i=Math.ceil(e/Z/s.numWorkers)*Z,r=e,o=[],n=0;case 17:if(!(n<s.numWorkers)){I.next=29;break}if(!d){I.next=22;break}o.push(L(s.workers[n],{action:N.ALLOC,size:e,memAddress:A})),I.next=26;break;case 22:if(o.push(L(s.workers[n],{action:N.ALLOC,size:Math.min(r,i),memAddress:A})),!((r-=i)<=0)){I.next=26;break}return I.abrupt("break",29);case 26:n++,I.next=17;break;case 29:return I.next=31,Promise.all(o);case 31:E.addMemory(A,{objAddress:g,isShared:d,allocSize:e,chunkSize:i}),C(t,0);case 33:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l){return I.apply(this,arguments)}}(),t=function(){var I=e(b.mark((function I(g){var C,A,e,c,l;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(g=S(g),!E.hasMemory(g)){I.next=9;break}for(C=E.getMemory(g),A=C.objAddress,e=E.getXpu(A),c=[],l=0;l<e.numWorkers;l++)c.push(L(e.workers[l],{action:N.FREE,memAddress:g}));return I.next=8,Promise.all(c);case 8:E.removeMemory(g);case 9:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),s=function(){var g=e(b.mark((function g(C,A,e,c){var l,t,s,Z,d,i,r,o,n,m,G,a,B;return b.wrap((function(g){for(;;)switch(g.prev=g.next){case 0:if(C=S(C),A=S(A),l=E.getMemory(C)){g.next=5;break}return g.abrupt("return");case 5:t=l.objAddress,s=l.isShared,Z=l.chunkSize,d=E.getXpu(t),i=new Uint8Array(I.buffer).slice(A,A+c),r=[],o=c,n=0;case 11:if(!(n<d.numWorkers)){g.next=24;break}if(!s){g.next=16;break}r.push(L(d.workers[n],{action:N.COPY_TO_XPU,memAddress:C,offset:e,buffer:i})),g.next=21;break;case 16:if(m=n*Z,e<(n+1)*Z&&(a=Z-(G=e>m?e-m:0),B=c-o,r.push(L(d.workers[n],{action:N.COPY_TO_XPU,memAddress:C,offset:G,buffer:i.slice(B,B+a)})),o-=a),!(o<=0)){g.next=21;break}return g.abrupt("break",24);case 21:n++,g.next=11;break;case 24:return g.next=26,Promise.all(r);case 26:case"end":return g.stop()}}),g)})));return function(I,C,A,e){return g.apply(this,arguments)}}(),Z=function(){var g=e(b.mark((function g(C,A,e,c){var l,t,s,Z,d,i,r,o,n,m,G,a,B,y,V,W,u;return b.wrap((function(g){for(;;)switch(g.prev=g.next){case 0:if(C=S(C),A=S(A),l=E.getMemory(C)){g.next=5;break}return g.abrupt("return");case 5:if(t=l.objAddress,s=l.allocSize,Z=l.isShared,d=l.chunkSize,i=E.getXpu(t),r=new Uint8Array(I.buffer),o=[],!Z){g.next=13;break}o.push(L(i.workers[0],{action:N.COPY_FROM_XPU,memAddress:C,offset:e,size:s})),g.next=24;break;case 13:n=s,m=0;case 15:if(!(m<i.numWorkers)){g.next=24;break}if(G=m*d,e<(m+1)*d&&(a=e>G?e-G:0,B=Math.min(n,d-a),o.push(L(i.workers[m],{action:N.COPY_FROM_XPU,memAddress:C,offset:a,size:B})),n-=B),0!==n){g.next=21;break}return g.abrupt("break",24);case 21:m++,g.next=15;break;case 24:return g.next=26,Promise.all(o);case 26:y=g.sent,V=0,W=0;case 29:if(!(W<y.length)){g.next=41;break}if(u=y[W],!(V+u.length>c)){g.next=36;break}return r.set(u.slice(0,c-V),A+V),g.abrupt("break",41);case 36:r.set(u,A+V),V+=u.length;case 38:W++,g.next=29;break;case 41:case"end":return g.stop()}}),g)})));return function(I,C,A,e){return g.apply(this,arguments)}}(),d=function(){var I=e(b.mark((function I(g,C,A){var e,c,l,t,s,Z,d,i,r;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(g=S(g),e=E.getMemory(g)){I.next=4;break}return I.abrupt("return");case 4:c=e.objAddress,l=e.allocSize,t=e.isShared,s=e.chunkSize,Z=E.getXpu(c),d=[],i=A,r=0;case 9:if(!(r<Z.numWorkers)){I.next=21;break}if(!t){I.next=14;break}d.push(L(Z.workers[r],{action:N.MEMSET,memAddress:g,fillByte:C,size:l})),I.next=18;break;case 14:if(d.push(L(Z.workers[r],{action:N.MEMSET,memAddress:g,fillByte:C,size:Math.min(i,s)})),!((i-=s)<=0)){I.next=18;break}return I.abrupt("break",21);case 18:r++,I.next=9;break;case 21:return I.next=23,Promise.all(d);case 23:case"end":return I.stop()}}),I)})));return function(g,C,A){return I.apply(this,arguments)}}(),i=function(){var I=e(b.mark((function I(g){var A;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:g=S(g),A=window.navigator.hardwareConcurrency,C(g,A||1);case 3:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),r=function(){var I=e(b.mark((function I(g){var C,A,e;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(g=S(g),C=E.getXpu(g)){I.next=4;break}return I.abrupt("return");case 4:for(A=[],e=0;e<C.numWorkers;e++)A.push(L(C.workers[e],{action:N.TIMER_START,workerIndex:e}));return I.next=8,Promise.all(A);case 8:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),o=function(){var I=e(b.mark((function I(g){var C,A,e;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(g=S(g),C=E.getXpu(g)){I.next=4;break}return I.abrupt("return");case 4:for(A=[],e=0;e<C.numWorkers;e++)A.push(L(C.workers[e],{action:N.TIMER_STOP}));return I.next=8,Promise.all(A);case 8:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),n=II(II(II(II(II(II(II(II(II({aligned_alloc:function(I,g){throw new Error("aligned_alloc was not passed in from parent module")},pv_xpu_web_worker_device_info_wasm:A,pv_xpu_web_worker_device_init_wasm:c,pv_xpu_web_worker_device_cleanup_wasm:function(I){I=S(I);var g=E.getXpu(I);if(g){var C,A=gI(g.workers);try{for(A.s();!(C=A.n()).done;){C.value.terminate()}}catch(I){A.e(I)}finally{A.f()}E.removeXpu(I)}},pv_xpu_web_worker_device_mem_alloc_wasm:l,pv_xpu_web_worker_device_mem_free_wasm:t,pv_xpu_web_worker_device_mem_copy_to_xpu_wasm:s,pv_xpu_web_worker_device_mem_copy_from_xpu_wasm:Z,pv_xpu_web_worker_device_mem_memset_wasm:d,pv_xpu_web_worker_get_max_workers_wasm:i,pv_xpu_web_worker_timer_start_wasm:r,pv_xpu_web_worker_timer_stop_wasm:o},function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s){var Z,d,i,r,o,n,m,G,a,B,y;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(Z=E.getXpu(C)){I.next=4;break}return g(s,-1),I.abrupt("return");case 4:if(d=E.getMemory(A)){I.next=8;break}return g(s,-1),I.abrupt("return");case 8:i=Z.numWorkers,r=d.chunkSize/(l/2),o=c,n=[],m=0;case 13:if(!(m<i)){I.next=21;break}if(n.push(L(Z.workers[m],{action:N.MATRIX_VECTOR_MULTIPLY,matrixAddress:A,vectorAddress:e,m:Math.min(o,r),n:l,resultAddress:t})),!((o-=r)<=0)){I.next=18;break}return I.abrupt("break",21);case 18:m++,I.next=13;break;case 21:return G=new Float32Array(l),I.next=24,Promise.all(n);case 24:for(a=I.sent,B=0;B<a.length;B++)a[B].length>0&&G.set(a[B],B*r);for(n=[],y=0;y<i;y++)n.push(L(Z.workers[y],{action:N.SYNC_VECTOR,vectorAddress:t,buffer:G}));return I.next=30,Promise.all(n);case 30:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t){return I.apply(this,arguments)}}();return{pv_matrix_vector_multiply_web_worker_wasm:C}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l,t){var s,Z,d;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),A=S(A),t=S(t),s=E.getXpu(C)){I.next=7;break}return g(t,-1),I.abrupt("return");case 7:for(Z=[],d=0;d<s.numWorkers;d++)Z.push(L(s.workers[d],{action:x.ATTENTION_PRECOMPUTE_ENCODING,encodingAddress:A,dimension:e,steps:c,theta:l}));return I.next=11,Promise.all(Z);case 11:g(t,0);case 12:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l){return I.apply(this,arguments)}}(),A=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d,i){var r,o,n;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),A=S(A),e=S(e),i=S(i),r=E.getXpu(C)){I.next=8;break}return g(i,-1),I.abrupt("return");case 8:for(o=[],n=0;n<r.numWorkers;n++)o.push(L(r.workers[n],{action:x.ATTENTION_ENCODE,xAddress:A,newEncodingAddress:e,n:c,numHeads:l,ropeInterleaved:t,headDimension:s,ropeDimension:Z,position:d}));return I.next=12,Promise.all(o);case 12:g(i,0);case 13:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z,d){return I.apply(this,arguments)}}(),c=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d,i,r,o,n,m,G,a){var B,y,V;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),t=S(t),s=S(s),Z=S(Z),d=S(d),i=S(i),r=S(r),n=S(n),G=S(G),a=S(a),B=E.getXpu(C)){I.next=14;break}return g(a,-1),I.abrupt("return");case 14:for(y=[],V=0;V<B.numWorkers;V++)y.push(L(B.workers[V],{action:x.ATTENTION_ATTEND,numHeads:A,numKvHeads:e,windowLength:c,headDimension:l,keysAddress:t,keyInterceptsAddress:s,keySlopesAddress:Z,valuesAddress:d,valueInterceptsAddress:i,valueSlopesAddress:r,position:o,queryAddress:n,n:m,outputAddress:G}));return I.next=18,Promise.all(y);case 18:g(a,0);case 19:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z,d,b,i,r,o,n,m){return I.apply(this,arguments)}}(),l=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d,i,r){var o,n,m;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),l=S(l),t=S(t),s=S(s),i=S(i),r=S(r),o=E.getXpu(C)){I.next=10;break}return g(r,-1),I.abrupt("return");case 10:for(n=[],m=0;m<o.numWorkers;m++)n.push(L(o.workers[m],{action:x.ATTENTION_UPDATE_KEYS,numKvHeads:A,windowLength:e,headDimension:c,keysAddress:l,keyInterceptsAddress:t,keySlopesAddress:s,position:Z,n:d,tfAddress:i}));return I.next=14,Promise.all(n);case 14:g(r,0);case 15:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z,d,b){return I.apply(this,arguments)}}(),t=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d,i,r){var o,n,m;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),l=S(l),t=S(t),s=S(s),i=S(i),r=S(r),o=E.getXpu(C)){I.next=10;break}return g(r,-1),I.abrupt("return");case 10:for(n=[],m=0;m<o.numWorkers;m++)n.push(L(o.workers[m],{action:x.ATTENTION_UPDATE_VALUES,numKvHeads:A,windowLength:e,headDimension:c,valuesAddress:l,valueInterceptsAddress:t,valueSlopesAddress:s,position:Z,n:d,tfAddress:i}));return I.next=14,Promise.all(n);case 14:g(r,0);case 15:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z,d,b){return I.apply(this,arguments)}}(),s=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s){var Z,d,i;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),s=S(s),Z=E.getXpu(C)){I.next=7;break}return I.abrupt("return");case 7:for(d=[],i=0;i<Z.numWorkers;i++)d.push(L(Z.workers[i],{action:x.ATTENTION_TRANSPOSE_QUERY,n:A,tfAddress:e,hfAddress:c,numHeads:l,headDimension:t}));return I.next=11,Promise.all(d);case 11:g(s,0);case 12:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t){return I.apply(this,arguments)}}();return{pv_picollm_attention_precompute_encoding_web_worker_wasm:C,pv_picollm_attention_encode_web_worker_wasm:A,pv_picollm_attention_attend_web_worker_wasm:c,pv_picollm_attention_update_keys_web_worker_wasm:l,pv_picollm_attention_update_values_web_worker_wasm:t,pv_picollm_attention_transpose_query_web_worker_wasm:s}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c){var l,t,s;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=E.getXpu(C)){I.next=7;break}return g(c,-1),I.abrupt("return");case 7:for(t=[],s=0;s<l.numWorkers;s++)t.push(L(l.workers[s],{action:T.FEED_FORWARD_SILU,n:A,xAddress:e}));return I.next=11,Promise.all(t);case 11:g(c,0);case 12:case"end":return I.stop()}}),I)})));return function(g,C,A,e){return I.apply(this,arguments)}}(),A=function(){var I=e(b.mark((function I(C,A,e,c){var l,t,s;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=E.getXpu(C)){I.next=7;break}return g(c,-1),I.abrupt("return");case 7:for(t=[],s=0;s<l.numWorkers;s++)t.push(L(l.workers[s],{action:T.FEED_FORWARD_GELU,n:A,xAddress:e}));return I.next=11,Promise.all(t);case 11:g(c,0);case 12:case"end":return I.stop()}}),I)})));return function(g,C,A,e){return I.apply(this,arguments)}}(),c=function(){var I=e(b.mark((function I(C,A,e,c){var l,t,s;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=E.getXpu(C)){I.next=6;break}return I.abrupt("return");case 6:for(t=[],s=0;s<l.numWorkers;s++)t.push(L(l.workers[s],{action:T.FEED_FORWARD_ALMOST_GELU,n:A,xAddress:e}));return I.next=10,Promise.all(t);case 10:g(c,0);case 11:case"end":return I.stop()}}),I)})));return function(g,C,A,e){return I.apply(this,arguments)}}(),l=function(){var I=e(b.mark((function I(C,A,e,c,l){var t,s,Z;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=S(l),t=E.getXpu(C)){I.next=8;break}return g(l,-1),I.abrupt("return");case 8:for(s=[],Z=0;Z<t.numWorkers;Z++)s.push(L(t.workers[Z],{action:T.FEED_FORWARD_MULTIPLY_BUFFERS,n:A,xAddress:e,yAddress:c}));return I.next=12,Promise.all(s);case 12:g(l,0);case 13:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c){return I.apply(this,arguments)}}();return{pv_picollm_feed_forward_silu_web_worker_wasm:C,pv_picollm_feed_forward_gelu_web_worker_wasm:A,pv_picollm_feed_forward_almost_gelu_web_worker_wasm:c,pv_picollm_feed_forward_multiply_buffers_web_worker_wasm:l}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z){var d,i,r;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),l=S(l),t=S(t),s=S(s),Z=S(Z),d=E.getXpu(C)){I.next=9;break}return g(Z,-1),I.abrupt("return");case 9:for(i=[],r=0;r<d.numWorkers;r++)i.push(L(d.workers[r],{action:D.GATE_FORWARD,n:A,k:e,numExperts:c,indicesAddress:l,weightsAddress:t,yAddress:s}));return I.next=13,Promise.all(i);case 13:g(Z,0);case 14:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s){return I.apply(this,arguments)}}();return{pv_picollm_gate_forward_web_worker_wasm:C}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l){var t,s,Z;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=S(l),t=E.getXpu(C)){I.next=8;break}return g(l,-1),I.abrupt("return");case 8:for(s=[],Z=0;Z<t.numWorkers;Z++)s.push(L(t.workers[Z],{action:P.ADD_TO_BUFFER,n:A,xAddress:e,bufferAddress:c}));return I.next=12,Promise.all(s);case 12:g(l,0);case 13:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c){return I.apply(this,arguments)}}(),A=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z){var d,i,r;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),l=S(l),t=S(t),s=S(s),Z=S(Z),d=E.getXpu(C)){I.next=9;break}return g(Z,-1),I.abrupt("return");case 9:for(i=[],r=0;r<d.numWorkers;r++)i.push(L(d.workers[r],{action:P.MULTIPLY_WEIGHT_AND_ADD_TO_BUFFER,n:A,weightsIndex:e,yIndex:c,weightsAddress:l,xAddress:t,yAddress:s}));return I.next=13,Promise.all(i);case 13:g(Z,0);case 14:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s){return I.apply(this,arguments)}}(),c=function(){var I=e(b.mark((function I(C,A,e,c,l,t){var s,Z,d;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=S(l),t=S(t),s=E.getXpu(C)){I.next=9;break}return g(t,-1),I.abrupt("return");case 9:for(Z=[],d=0;d<s.numWorkers;d++)Z.push(L(s.workers[d],{action:P.ADD_BUFFERS,n:A,buffer1Address:e,buffer2Address:c,yAddress:l}));return I.next=13,Promise.all(Z);case 13:g(t,0);case 14:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l){return I.apply(this,arguments)}}();return{pv_picollm_moe_transformer_add_to_buffer_web_worker_wasm:C,pv_picollm_moe_transformer_multiply_weight_and_add_to_buffer_web_worker_wasm:A,pv_picollm_moe_transformer_add_buffers_web_worker_wasm:c}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d,i){var r,o,n;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),c=S(c),s=S(s),d=S(d),i=S(i),r=E.getXpu(C)){I.next=9;break}return g(i,-1),I.abrupt("return");case 9:for(o=[],n=0;n<r.numWorkers;n++)o.push(L(r.workers[n],{action:O.NORM_FORWARD,dimension:A,eps:e,weightAddress:c,n:l,xOffset:t,xAddress:s,yOffset:Z,yAddress:d}));return I.next=13,Promise.all(o);case 13:g(i,0);case 14:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z,d){return I.apply(this,arguments)}}();return{pv_picollm_norm_forward_web_worker_wasm:C}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d,i,r){var o,n,m;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),c=S(c),l=S(l),Z=S(Z),i=S(i),r=S(r),o=E.getXpu(C)){I.next=10;break}return g(r,-1),I.abrupt("return");case 10:for(n=[],m=0;m<o.numWorkers;m++)n.push(L(o.workers[m],{action:_.NORM_LAYER_FORWARD,dimension:A,eps:e,weightAddress:c,biasAddress:l,n:t,xOffset:s,xAddress:Z,yOffset:d,yAddress:i}));return I.next=14,Promise.all(n);case 14:g(r,0);case 15:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z,d,b){return I.apply(this,arguments)}}();return{pv_picollm_norm_layer_forward_web_worker_wasm:C}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,l){var t,s,Z;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=S(l),t=E.getXpu(C)){I.next=8;break}return g(l,-1),I.abrupt("return");case 8:for(s=[],Z=0;Z<t.numWorkers;Z++)s.push(L(t.workers[Z],{action:j.ADD_TO_BUFFER,n:A,xAddress:e,bufferAddress:c}));return I.next=12,Promise.all(s);case 12:g(l,0);case 13:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c){return I.apply(this,arguments)}}(),A=function(){var I=e(b.mark((function I(C,A,e,c,l,t){var s,Z,d;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),e=S(e),c=S(c),l=S(l),t=S(t),s=E.getXpu(C)){I.next=9;break}return g(t,-1),I.abrupt("return");case 9:for(Z=[],d=0;d<s.numWorkers;d++)Z.push(L(s.workers[d],{action:j.ADD_BUFFERS,n:A,buffer1Address:e,buffer2Address:c,yAddress:l}));return I.next=13,Promise.all(Z);case 13:g(t,0);case 14:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l){return I.apply(this,arguments)}}();return{pv_picollm_transformer_add_to_buffer_web_worker_wasm:C,pv_picollm_transformer_add_buffers_web_worker_wasm:A}}(I)),function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var C=e(b.mark((function C(A,e,c,l,t,s,Z,d){var i,r,o,n,m,G,a;return b.wrap((function(C){for(;;)switch(C.prev=C.next){case 0:if(A=S(A),e=S(e),l=S(l),t=S(t),Z=S(Z),d=S(d),i=E.getXpu(A)){C.next=10;break}return g(d,-1),C.abrupt("return");case 10:for(r=new Int32Array(I.buffer),o=r.slice(e/Int32Array.BYTES_PER_ELEMENT,e/Int32Array.BYTES_PER_ELEMENT+2),n=r.slice(l/Int32Array.BYTES_PER_ELEMENT,l/Int32Array.BYTES_PER_ELEMENT+c),m=r.slice(t/Int32Array.BYTES_PER_ELEMENT,t/Int32Array.BYTES_PER_ELEMENT+c),G=[],a=0;a<i.numWorkers;a++)G.push(L(i.workers[a],{action:q.WEIGHT_BLOCK_MIXED_16X8_PREPROCESS_BLOCKS,shape:o,bitDepths:n,bitDepthStarts:m,numBlockBytes:s,blocksAddress:Z}));return C.next=18,Promise.all(G);case 18:g(d,0);case 19:case"end":return C.stop()}}),C)})));return function(I,g,A,e,c,l,t,s){return C.apply(this,arguments)}}(),A=function(){var C=e(b.mark((function C(A,e,c,l,t,s,Z,d,i,r,o,n,m,G){var a,B,y,V,W,u,R;return b.wrap((function(C){for(;;)switch(C.prev=C.next){case 0:if(A=S(A),e=S(e),c=S(c),t=S(t),s=S(s),d=S(d),r=S(r),n=S(n),m=S(m),G=S(G),a=E.getXpu(A)){C.next=14;break}return g(G,-1),C.abrupt("return");case 14:for(B=new Int32Array(I.buffer),y=B.slice(e/Int32Array.BYTES_PER_ELEMENT,e/Int32Array.BYTES_PER_ELEMENT+2),V=B.slice(t/Int32Array.BYTES_PER_ELEMENT,t/Int32Array.BYTES_PER_ELEMENT+l),W=B.slice(s/Int32Array.BYTES_PER_ELEMENT,s/Int32Array.BYTES_PER_ELEMENT+l),u=[],R=0;R<a.numWorkers;R++)u.push(L(a.workers[R],{action:q.WEIGHT_BLOCK_MIXED_16X8_FORWARD_SINGLE,shape:y,indicesAddress:c,bitDepthStarts:V,bitDepths:W,numMetas:Z,metasAddress:d,numBlockBytes:i,blocksAddress:r,xOffset:o,xAddress:n,yAddress:m}));return C.next=22,Promise.all(u);case 22:g(G,0);case 23:case"end":return C.stop()}}),C)})));return function(I,g,A,e,c,l,t,s,Z,d,b,i,r,o){return C.apply(this,arguments)}}(),c=function(){var C=e(b.mark((function C(A,e,c,l,t,s,Z,d,i,r,o,n,m,G,a){var B,y,V,W,u,R,X;return b.wrap((function(C){for(;;)switch(C.prev=C.next){case 0:if(A=S(A),e=S(e),c=S(c),t=S(t),s=S(s),d=S(d),r=S(r),m=S(m),G=S(G),a=S(a),B=E.getXpu(A)){C.next=14;break}return g(a,-1),C.abrupt("return");case 14:for(y=new Int32Array(I.buffer),V=y.slice(e/Int32Array.BYTES_PER_ELEMENT,e/Int32Array.BYTES_PER_ELEMENT+2),W=y.slice(t/Int32Array.BYTES_PER_ELEMENT,t/Int32Array.BYTES_PER_ELEMENT+l),u=y.slice(s/Int32Array.BYTES_PER_ELEMENT,s/Int32Array.BYTES_PER_ELEMENT+l),R=[],X=0;X<B.numWorkers;X++)R.push(L(B.workers[X],{action:q.WEIGHT_BLOCK_MIXED_16X8_FORWARD_MULTIPLE,shape:V,indicesAddress:c,bitDepthStarts:W,bitDepths:u,numMetas:Z,metasAddress:d,numBlockBytes:i,blocksAddress:r,n:o,xOffset:n,xAddress:m,yAddress:G}));return C.next=22,Promise.all(R);case 22:g(a,0);case 23:case"end":return C.stop()}}),C)})));return function(I,g,A,e,c,l,t,s,Z,d,b,i,r,o,n){return C.apply(this,arguments)}}(),l=function(){var I=e(b.mark((function I(C,A,e,c,l,t){var s,Z,d;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),c=S(c),l=S(l),t=S(t),s=E.getXpu(C)){I.next=8;break}return g(t,-1),I.abrupt("return");case 8:for(Z=[],d=0;d<s.numWorkers;d++)Z.push(L(s.workers[d],{action:q.WEIGHT_BLOCK_MIXED_16X8_ADD_BIAS,n:A,dimension:e,yAddress:c,biasAddress:l}));return I.next=12,Promise.all(Z);case 12:g(t,0);case 13:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l){return I.apply(this,arguments)}}(),t=function(){var I=e(b.mark((function I(C,A,e,c,l,t,s,Z,d){var i,r,o;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(C=S(C),l=S(l),s=S(s),Z=S(Z),d=S(d),i=E.getXpu(C)){I.next=9;break}return g(d,-1),I.abrupt("return");case 9:for(r=[],o=0;o<i.numWorkers;o++)r.push(L(i.workers[o],{action:q.WEIGHT_FLOAT_FORWARD,n:A,nc:e,nr:c,wAddress:l,xOffset:t,xAddress:s,yAddress:Z}));return I.next=13,Promise.all(r);case 13:g(d,0);case 14:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,l,t,s,Z){return I.apply(this,arguments)}}();return{pv_picollm_weight_block_mixed_16x8_preprocess_blocks_web_worker_wasm:C,pv_picollm_weight_block_mixed_16x8_forward_single_web_worker_wasm:A,pv_picollm_weight_block_mixed_16x8_forward_multiple_web_worker_wasm:c,pv_picollm_weight_block_mixed_16x8_add_bias_web_worker_wasm:l,pv_picollm_weight_float_forward_web_worker_wasm:t}}(I));return n};export{AI as default};
