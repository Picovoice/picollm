function I(g){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I(g)}function g(g){var C=function(g,C){if("object"!=I(g)||!g)return g;var A=g[Symbol.toPrimitive];if(void 0!==A){var e=A.call(g,C||"default");if("object"!=I(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===C?String:Number)(g)}(g,"string");return"symbol"==I(C)?C:String(C)}function C(I,C,A){return(C=g(C))in I?Object.defineProperty(I,C,{value:A,enumerable:!0,configurable:!0,writable:!0}):I[C]=A,I}function A(I,g,C,A,e,c,i){try{var o=I[c](i),t=o.value}catch(I){return void C(I)}o.done?g(t):Promise.resolve(t).then(A,e)}function e(I){return function(){var g=this,C=arguments;return new Promise((function(e,c){var i=I.apply(g,C);function o(I){A(i,e,c,o,t,"next",I)}function t(I){A(i,e,c,o,t,"throw",I)}o(void 0)}))}}function c(I){return I&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I}var i={exports:{}},o={exports:{}};!function(I){function g(C){return I.exports=g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I.exports.__esModule=!0,I.exports.default=I.exports,g(C)}I.exports=g,I.exports.__esModule=!0,I.exports.default=I.exports}(o);var t=o.exports;!function(I){var g=t.default;function C(){I.exports=C=function(){return e},I.exports.__esModule=!0,I.exports.default=I.exports;var A,e={},c=Object.prototype,i=c.hasOwnProperty,o=Object.defineProperty||function(I,g,C){I[g]=C.value},t="function"==typeof Symbol?Symbol:{},l=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",b=t.toStringTag||"@@toStringTag";function r(I,g,C){return Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}),I[g]}try{r({},"")}catch(A){r=function(I,g,C){return I[g]=C}}function d(I,g,C,A){var e=g&&g.prototype instanceof y?g:y,c=Object.create(e.prototype),i=new k(A||[]);return o(c,"_invoke",{value:w(I,C,i)}),c}function Z(I,g,C){try{return{type:"normal",arg:I.call(g,C)}}catch(I){return{type:"throw",arg:I}}}e.wrap=d;var m="suspendedStart",u="suspendedYield",a="executing",s="completed",B={};function y(){}function G(){}function H(){}var h={};r(h,l,(function(){return this}));var V=Object.getPrototypeOf,X=V&&V(V(Y([])));X&&X!==c&&i.call(X,l)&&(h=X);var S=H.prototype=y.prototype=Object.create(h);function p(I){["next","throw","return"].forEach((function(g){r(I,g,(function(I){return this._invoke(g,I)}))}))}function W(I,C){function A(e,c,o,t){var l=Z(I[e],I,c);if("throw"!==l.type){var n=l.arg,b=n.value;return b&&"object"==g(b)&&i.call(b,"__await")?C.resolve(b.__await).then((function(I){A("next",I,o,t)}),(function(I){A("throw",I,o,t)})):C.resolve(b).then((function(I){n.value=I,o(n)}),(function(I){return A("throw",I,o,t)}))}t(l.arg)}var e;o(this,"_invoke",{value:function(I,g){function c(){return new C((function(C,e){A(I,g,C,e)}))}return e=e?e.then(c,c):c()}})}function w(I,g,C){var e=m;return function(c,i){if(e===a)throw new Error("Generator is already running");if(e===s){if("throw"===c)throw i;return{value:A,done:!0}}for(C.method=c,C.arg=i;;){var o=C.delegate;if(o){var t=J(o,C);if(t){if(t===B)continue;return t}}if("next"===C.method)C.sent=C._sent=C.arg;else if("throw"===C.method){if(e===m)throw e=s,C.arg;C.dispatchException(C.arg)}else"return"===C.method&&C.abrupt("return",C.arg);e=a;var l=Z(I,g,C);if("normal"===l.type){if(e=C.done?s:u,l.arg===B)continue;return{value:l.arg,done:C.done}}"throw"===l.type&&(e=s,C.method="throw",C.arg=l.arg)}}}function J(I,g){var C=g.method,e=I.iterator[C];if(e===A)return g.delegate=null,"throw"===C&&I.iterator.return&&(g.method="return",g.arg=A,J(I,g),"throw"===g.method)||"return"!==C&&(g.method="throw",g.arg=new TypeError("The iterator does not provide a '"+C+"' method")),B;var c=Z(e,I.iterator,g.arg);if("throw"===c.type)return g.method="throw",g.arg=c.arg,g.delegate=null,B;var i=c.arg;return i?i.done?(g[I.resultName]=i.value,g.next=I.nextLoc,"return"!==g.method&&(g.method="next",g.arg=A),g.delegate=null,B):i:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,B)}function R(I){var g={tryLoc:I[0]};1 in I&&(g.catchLoc=I[1]),2 in I&&(g.finallyLoc=I[2],g.afterLoc=I[3]),this.tryEntries.push(g)}function K(I){var g=I.completion||{};g.type="normal",delete g.arg,I.completion=g}function k(I){this.tryEntries=[{tryLoc:"root"}],I.forEach(R,this),this.reset(!0)}function Y(I){if(I||""===I){var C=I[l];if(C)return C.call(I);if("function"==typeof I.next)return I;if(!isNaN(I.length)){var e=-1,c=function g(){for(;++e<I.length;)if(i.call(I,e))return g.value=I[e],g.done=!1,g;return g.value=A,g.done=!0,g};return c.next=c}}throw new TypeError(g(I)+" is not iterable")}return G.prototype=H,o(S,"constructor",{value:H,configurable:!0}),o(H,"constructor",{value:G,configurable:!0}),G.displayName=r(H,b,"GeneratorFunction"),e.isGeneratorFunction=function(I){var g="function"==typeof I&&I.constructor;return!!g&&(g===G||"GeneratorFunction"===(g.displayName||g.name))},e.mark=function(I){return Object.setPrototypeOf?Object.setPrototypeOf(I,H):(I.__proto__=H,r(I,b,"GeneratorFunction")),I.prototype=Object.create(S),I},e.awrap=function(I){return{__await:I}},p(W.prototype),r(W.prototype,n,(function(){return this})),e.AsyncIterator=W,e.async=function(I,g,C,A,c){void 0===c&&(c=Promise);var i=new W(d(I,g,C,A),c);return e.isGeneratorFunction(g)?i:i.next().then((function(I){return I.done?I.value:i.next()}))},p(S),r(S,b,"Generator"),r(S,l,(function(){return this})),r(S,"toString",(function(){return"[object Generator]"})),e.keys=function(I){var g=Object(I),C=[];for(var A in g)C.push(A);return C.reverse(),function I(){for(;C.length;){var A=C.pop();if(A in g)return I.value=A,I.done=!1,I}return I.done=!0,I}},e.values=Y,k.prototype={constructor:k,reset:function(I){if(this.prev=0,this.next=0,this.sent=this._sent=A,this.done=!1,this.delegate=null,this.method="next",this.arg=A,this.tryEntries.forEach(K),!I)for(var g in this)"t"===g.charAt(0)&&i.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=A)},stop:function(){this.done=!0;var I=this.tryEntries[0].completion;if("throw"===I.type)throw I.arg;return this.rval},dispatchException:function(I){if(this.done)throw I;var g=this;function C(C,e){return o.type="throw",o.arg=I,g.next=C,e&&(g.method="next",g.arg=A),!!e}for(var e=this.tryEntries.length-1;e>=0;--e){var c=this.tryEntries[e],o=c.completion;if("root"===c.tryLoc)return C("end");if(c.tryLoc<=this.prev){var t=i.call(c,"catchLoc"),l=i.call(c,"finallyLoc");if(t&&l){if(this.prev<c.catchLoc)return C(c.catchLoc,!0);if(this.prev<c.finallyLoc)return C(c.finallyLoc)}else if(t){if(this.prev<c.catchLoc)return C(c.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return C(c.finallyLoc)}}}},abrupt:function(I,g){for(var C=this.tryEntries.length-1;C>=0;--C){var A=this.tryEntries[C];if(A.tryLoc<=this.prev&&i.call(A,"finallyLoc")&&this.prev<A.finallyLoc){var e=A;break}}e&&("break"===I||"continue"===I)&&e.tryLoc<=g&&g<=e.finallyLoc&&(e=null);var c=e?e.completion:{};return c.type=I,c.arg=g,e?(this.method="next",this.next=e.finallyLoc,B):this.complete(c)},complete:function(I,g){if("throw"===I.type)throw I.arg;return"break"===I.type||"continue"===I.type?this.next=I.arg:"return"===I.type?(this.rval=this.arg=I.arg,this.method="return",this.next="end"):"normal"===I.type&&g&&(this.next=g),B},finish:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.finallyLoc===I)return this.complete(C.completion,C.afterLoc),K(C),B}},catch:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc===I){var A=C.completion;if("throw"===A.type){var e=A.arg;K(C)}return e}}throw new Error("illegal catch attempt")},delegateYield:function(I,g,C){return this.delegate={iterator:Y(I),resultName:g,nextLoc:C},"next"===this.method&&(this.arg=A),B}},e}I.exports=C,I.exports.__esModule=!0,I.exports.default=I.exports}(i);var l=(0,i.exports)(),n=l;try{regeneratorRuntime=l}catch(I){"object"==typeof globalThis?globalThis.regeneratorRuntime=l:Function("r","regeneratorRuntime = r")(l)}var b=c(n);function r(I,g,C){var A=void 0===g?null:g,e=function(I,g){var C=atob(I);if(g){for(var A=new Uint8Array(C.length),e=0,c=C.length;e<c;++e)A[e]=C.charCodeAt(e);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}(I,void 0!==C&&C),c=e.indexOf("\n",10)+1,i=e.substring(c)+(A?"//# sourceMappingURL="+A:""),o=new Blob([i],{type:"application/javascript"});return URL.createObjectURL(o)}var d,Z,m,u,a,s=(d="",Z=null,m=!1,function(I){return u=u||r(d,Z,m),new Worker(u,I)});function B(I,C){for(var A=0;A<C.length;A++){var e=C[A];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(I,g(e.key),e)}}function y(I,g){var C="undefined"!=typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=function(I,g){if(!I)return;if("string"==typeof I)return G(I,g);var C=Object.prototype.toString.call(I).slice(8,-1);"Object"===C&&I.constructor&&(C=I.constructor.name);if("Map"===C||"Set"===C)return Array.from(I);if("Arguments"===C||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return G(I,g)}(I))||g&&I&&"number"==typeof I.length){C&&(I=C);var A=0,e=function(){};return{s:e,n:function(){return A>=I.length?{done:!0}:{done:!1,value:I[A++]}},e:function(I){throw I},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,i=!0,o=!1;return{s:function(){C=C.call(I)},n:function(){var I=C.next();return i=I.done,I},e:function(I){o=!0,c=I},f:function(){try{i||null==C.return||C.return()}finally{if(o)throw c}}}}function G(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A}!function(I){I[I.INIT=0]="INIT",I[I.ALLOC=1]="ALLOC",I[I.FREE=2]="FREE",I[I.COPY_TO_XPU=3]="COPY_TO_XPU",I[I.COPY_FROM_XPU=4]="COPY_FROM_XPU",I[I.MATRIX_VECTOR_MULTIPLY=5]="MATRIX_VECTOR_MULTIPLY",I[I.SYNC_VECTOR=6]="SYNC_VECTOR"}(a||(a={}));var H=function(){function I(){!function(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")}(this,I)}var g,C,A;return g=I,A=[{key:"addXpu",value:function(g,C){I.xpuObjects.set(g,C)}},{key:"getXpu",value:function(g){return I.xpuObjects.get(g)}},{key:"hasXpu",value:function(g){return I.xpuObjects.has(g)}},{key:"removeXpu",value:function(g){if(I.xpuObjects.has(g)){var C,A=y(I.xpuObjects.get(g).deviceMem);try{for(A.s();!(C=A.n()).done;){var e=C.value;I.memoryObjects.delete(e)}}catch(I){A.e(I)}finally{A.f()}I.xpuObjects.delete(g)}}},{key:"addMemory",value:function(g,C){I.memoryObjects.set(g,C),I.xpuObjects.get(C.objAddress).deviceMem.add(g)}},{key:"getMemory",value:function(g){return I.memoryObjects.get(g)}},{key:"hasMemory",value:function(g){return I.memoryObjects.has(g)}},{key:"removeMemory",value:function(g){I.hasMemory(g)&&I.xpuObjects.get(I.getMemory(g).objAddress).deviceMem.delete(g),I.memoryObjects.delete(g)}}],(C=null)&&B(g.prototype,C),A&&B(g,A),Object.defineProperty(g,"prototype",{writable:!1}),I}();C(H,"xpuObjects",new Map),C(H,"memoryObjects",new Map);var h=function(I,g,C){return I.postMessage(g,C),new Promise((function(g,C){I.onmessage=function(I){switch(I.data.command){case"ok":g(I.data.result);break;case"failed":case"error":C(I.data.message);break;default:C("Unrecognized command: ".concat(I.data.command))}}}))};function V(I,g){var C=Object.keys(I);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(I);g&&(A=A.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),C.push.apply(C,A)}return C}function X(I,g){var C="undefined"!=typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=function(I,g){if(!I)return;if("string"==typeof I)return S(I,g);var C=Object.prototype.toString.call(I).slice(8,-1);"Object"===C&&I.constructor&&(C=I.constructor.name);if("Map"===C||"Set"===C)return Array.from(I);if("Arguments"===C||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return S(I,g)}(I))||g&&I&&"number"==typeof I.length){C&&(I=C);var A=0,e=function(){};return{s:e,n:function(){return A>=I.length?{done:!0}:{done:!1,value:I[A++]}},e:function(I){throw I},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,i=!0,o=!1;return{s:function(){C=C.call(I)},n:function(){var I=C.next();return i=I.done,I},e:function(I){o=!0,c=I},f:function(){try{i||null==C.return||C.return()}finally{if(o)throw c}}}}function S(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A}var p=function(I,g){var A=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},c=function(){var I=e(b.mark((function I(C,e,c){var i,o,t,l;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(g){I.next=3;break}return A(c,-1),I.abrupt("return");case 3:i=0===e?8:e,o=[],t=0;case 6:if(!(t<i)){I.next=14;break}return l=new s,o.push(l),I.next=11,h(l,{action:a.INIT,wasm:g});case 11:t++,I.next=6;break;case 14:H.addXpu(C,{deviceMem:new Set,numWorkers:i,workers:o}),A(c,0);case 16:case"end":return I.stop()}}),I)})));return function(g,C,A){return I.apply(this,arguments)}}(),i=function(){var I=e(b.mark((function I(g,C,e,c,i,o){var t,l,n,r,d,Z,m;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(t=H.getXpu(g)){I.next=4;break}return A(o,-1),I.abrupt("return");case 4:if(l=0===c?t.numWorkers:c,e%c==0){I.next=9;break}return A(o,-1),console.error("Failed to allocate memory: alloc size ".concat(e," must be divisible by batch ").concat(c,".")),I.abrupt("return");case 9:n=1===i,r=Math.ceil(e/l/t.numWorkers)*l,d=e,Z=[],m=0;case 14:if(!(m<t.numWorkers)){I.next=26;break}if(!n){I.next=19;break}Z.push(h(t.workers[m],{action:a.ALLOC,size:e,memAddress:C})),I.next=23;break;case 19:if(Z.push(h(t.workers[m],{action:a.ALLOC,size:Math.min(d,r),memAddress:C})),!((d-=r)<=0)){I.next=23;break}return I.abrupt("break",26);case 23:m++,I.next=14;break;case 26:return I.next=28,Promise.all(Z);case 28:H.addMemory(C,{objAddress:g,isShared:n,allocSize:e,chunkSize:r}),A(o,0);case 30:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,i){return I.apply(this,arguments)}}(),o=function(){var I=e(b.mark((function I(g){var C,A,e,c,i;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(!H.hasMemory(g)){I.next=8;break}for(C=H.getMemory(g),A=C.objAddress,e=H.getXpu(A),c=[],i=0;i<e.numWorkers;i++)c.push(h(e.workers[i],{action:a.FREE,memAddress:g}));return I.next=7,Promise.all(c);case 7:H.removeMemory(g);case 8:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),t=function(){var g=e(b.mark((function g(C,A,e){var c,i,o,t,l,n,r,d,Z;return b.wrap((function(g){for(;;)switch(g.prev=g.next){case 0:if(c=H.getMemory(C)){g.next=3;break}return g.abrupt("return");case 3:i=c.objAddress,o=c.isShared,t=c.chunkSize,l=H.getXpu(i),n=new Uint8Array(I.buffer).slice(A,A+e),r=[],d=e,Z=0;case 9:if(!(Z<l.numWorkers)){g.next=21;break}if(!o){g.next=14;break}r.push(h(l.workers[Z],{action:a.COPY_TO_XPU,memAddress:C,buffer:n})),g.next=18;break;case 14:if(r.push(h(l.workers[Z],{action:a.COPY_TO_XPU,memAddress:C,buffer:n.slice(Z*t,(Z+1)*t)})),!((d-=t)<=0)){g.next=18;break}return g.abrupt("break",21);case 18:Z++,g.next=9;break;case 21:return g.next=23,Promise.all(r);case 23:case"end":return g.stop()}}),g)})));return function(I,C,A){return g.apply(this,arguments)}}(),l=function(){var g=e(b.mark((function g(C,A,e){var c,i,o,t,l,n,r,d,Z,m,u,s,B,y;return b.wrap((function(g){for(;;)switch(g.prev=g.next){case 0:if(c=H.getMemory(C)){g.next=3;break}return g.abrupt("return");case 3:if(i=c.objAddress,o=c.allocSize,t=c.isShared,l=c.chunkSize,n=H.getXpu(i),r=new Uint8Array(I.buffer),d=[],!t){g.next=11;break}d.push(h(n.workers[0],{action:a.COPY_FROM_XPU,memAddress:C,size:o})),g.next=21;break;case 11:Z=o,m=0;case 13:if(!(m<n.numWorkers)){g.next=21;break}if(d.push(h(n.workers[m],{action:a.COPY_FROM_XPU,memAddress:C,size:Math.min(Z,l)})),0!==(Z-=l)){g.next=18;break}return g.abrupt("break",21);case 18:m++,g.next=13;break;case 21:return g.next=23,Promise.all(d);case 23:u=g.sent,s=0,B=0;case 26:if(!(B<u.length)){g.next=38;break}if(y=u[B],!(s+y.length>e)){g.next=33;break}return r.set(y.slice(0,e-s),A+s),g.abrupt("break",38);case 33:r.set(y,A+s),s+=y.length;case 35:B++,g.next=26;break;case 38:case"end":return g.stop()}}),g)})));return function(I,C,A){return g.apply(this,arguments)}}();return function(I){for(var g=1;g<arguments.length;g++){var A=null!=arguments[g]?arguments[g]:{};g%2?V(Object(A),!0).forEach((function(g){C(I,g,A[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(A)):V(Object(A)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(A,g))}))}return I}({pv_xpu_web_worker_device_init_wasm:c,pv_xpu_web_worker_device_cleanup_wasm:function(I){var g=H.getXpu(I);if(g){var C,A=X(g.workers);try{for(A.s();!(C=A.n()).done;){C.value.terminate()}}catch(I){A.e(I)}finally{A.f()}H.removeXpu(I)}},pv_xpu_web_worker_device_mem_alloc_wasm:i,pv_xpu_web_worker_device_mem_free_wasm:o,pv_xpu_web_worker_device_mem_copy_to_xpu_wasm:t,pv_xpu_web_worker_device_mem_copy_from_xpu_wasm:l},function(I){var g=function(g,C){new Int32Array(I.buffer)[g/Int32Array.BYTES_PER_ELEMENT]=C},C=function(){var I=e(b.mark((function I(C,A,e,c,i,o,t){var l,n,r,d,Z,m,u,s,B,y,G;return b.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(l=H.getXpu(C)){I.next=4;break}return g(t,-1),I.abrupt("return");case 4:if(n=H.getMemory(A)){I.next=8;break}return g(t,-1),I.abrupt("return");case 8:r=l.numWorkers,d=n.chunkSize/(i/2),Z=c,m=[],u=0;case 13:if(!(u<r)){I.next=21;break}if(m.push(h(l.workers[u],{action:a.MATRIX_VECTOR_MULTIPLY,matrixAddress:A,vectorAddress:e,m:Math.min(Z,d),n:i,resultAddress:o})),!((Z-=d)<=0)){I.next=18;break}return I.abrupt("break",21);case 18:u++,I.next=13;break;case 21:return s=new Float32Array(i),I.next=24,Promise.all(m);case 24:for(B=I.sent,y=0;y<B.length;y++)B[y].length>0&&s.set(B[y],y*d);for(m=[],G=0;G<r;G++)m.push(h(l.workers[G],{action:a.SYNC_VECTOR,vectorAddress:o,buffer:s}));return I.next=30,Promise.all(m);case 30:case"end":return I.stop()}}),I)})));return function(g,C,A,e,c,i,o){return I.apply(this,arguments)}}();return{pv_matrix_vector_multiply_web_worker_wasm:C}}(I))};export{p as default};
