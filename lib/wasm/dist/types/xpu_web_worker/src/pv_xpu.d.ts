declare const initXpu: (memory: WebAssembly.Memory, xpuHelperWasm?: Uint8Array) => {
    pv_picollm_weight_block_mixed_16x8_preprocess_blocks_web_worker_wasm: (objAddress: number, shapeAddress: number, numBitDepths: number, bitDepthsAddress: number, bitDepthsStartAddress: number, numBlockBytes: number, blocksAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_weight_block_mixed_16x8_forward_single_web_worker_wasm: (objAddress: number, shapeAddress: number, indicesAddress: number, numBitDepths: number, bitDepthsStartAddress: number, bitDepthsAddress: number, numMetas: number, metasAddress: number, numBlockBytes: number, blocksAddress: number, xOffset: number, xAddress: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_weight_block_mixed_16x8_forward_multiple_web_worker_wasm: (objAddress: number, shapeAddress: number, indicesAddress: number, numBitDepths: number, bitDepthsStartAddress: number, bitDepthsAddress: number, numMetas: number, metasAddress: number, numBlockBytes: number, blocksAddress: number, n: number, xOffset: number, xAddress: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_weight_block_mixed_16x8_add_bias_web_worker_wasm: (objAddress: number, n: number, dimension: number, yAddress: number, biasAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_weight_float_forward_web_worker_wasm: (objAddress: number, n: number, nc: number, nr: number, wAddress: number, xOffset: number, xAddress: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_transformer_add_to_buffer_web_worker_wasm: (objAddress: number, n: number, xAddress: number, bufferAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_transformer_add_buffers_web_worker_wasm: (objAddress: number, n: number, buffer1Address: number, buffer2Address: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_norm_layer_forward_web_worker_wasm: (objAddress: number, dimension: number, eps: number, weightAddress: number, biasAddress: number, n: number, xOffset: number, xAddress: number, yOffset: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_norm_forward_web_worker_wasm: (objAddress: number, dimension: number, eps: number, weightAddress: number, n: number, xOffset: number, xAddress: number, yOffset: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_moe_transformer_add_to_buffer_web_worker_wasm: (objAddress: number, n: number, xAddress: number, bufferAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_moe_transformer_multiply_weight_and_add_to_buffer_web_worker_wasm: (objAddress: number, n: number, weightsIndex: number, yIndex: number, weightsAddress: number, xAddress: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_moe_transformer_add_buffers_web_worker_wasm: (objAddress: number, n: number, buffer1Address: number, buffer2Address: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_gate_forward_web_worker_wasm: (objAddress: number, n: number, k: number, numExperts: number, indicesAddress: number, weightsAddress: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_feed_forward_silu_web_worker_wasm: (objAddress: number, n: number, xAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_feed_forward_gelu_web_worker_wasm: (objAddress: number, n: number, xAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_feed_forward_almost_gelu_web_worker_wasm: (objAddress: number, n: number, xAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_feed_forward_multiply_buffers_web_worker_wasm: (objAddress: number, n: number, xAddress: number, yAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_attention_precompute_encoding_web_worker_wasm: (objAddress: number, encodingAddress: number, dimension: number, steps: number, theta: number, statusAddress: number) => Promise<void>;
    pv_picollm_attention_encode_web_worker_wasm: (objAddress: number, xAddress: number, newEncodingAddress: number, n: number, numHeads: number, ropeInterleaved: number, headDimension: number, ropeDimension: number, position: number, statusAddress: number) => Promise<void>;
    pv_picollm_attention_attend_web_worker_wasm: (objAddress: number, numHeads: number, numKvHeads: number, windowLength: number, headDimension: number, keysAddress: number, keyInterceptsAddress: number, keySlopesAddress: number, valuesAddress: number, valueInterceptsAddress: number, valueSlopesAddress: number, position: number, queryAddress: number, n: number, outputAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_attention_update_keys_web_worker_wasm: (objAddress: number, numKvHeads: number, windowLength: number, headDimension: number, keysAddress: number, keyInterceptsAddress: number, keySlopesAddress: number, position: number, n: number, tfAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_attention_update_values_web_worker_wasm: (objAddress: number, numKvHeads: number, windowLength: number, headDimension: number, valuesAddress: number, valueInterceptsAddress: number, valueSlopesAddress: number, position: number, n: number, tfAddress: number, statusAddress: number) => Promise<void>;
    pv_picollm_attention_transpose_query_web_worker_wasm: (objAddress: number, n: number, tfAddress: number, hfAddress: number, numHeads: number, headDimension: number, statusAddress: number) => Promise<void>;
    pv_matrix_vector_multiply_web_worker_wasm: (objAddress: number, matrixAddress: number, vectorAddress: number, m: number, n: number, resultAddress: number, statusAddress: number) => Promise<void>;
    aligned_alloc: (alignment: number, size: number) => Promise<number>;
    pv_xpu_web_worker_device_info_wasm: (browserNameAddressAddress: number, browserVersionAddressAddress: number, osNameAddressAddress: number, numCoresAddress: number, statusAddress: number) => Promise<void>;
    pv_xpu_web_worker_device_init_wasm: (objAddress: number, numWorkers: number, statusAddress: number) => Promise<void>;
    pv_xpu_web_worker_device_cleanup_wasm: (objAddress: number) => void;
    pv_xpu_web_worker_device_mem_alloc_wasm: (objAddress: number, memAddress: number, sizeBytes: number, batchSize: number, isShared: number, statusAddress: number) => Promise<void>;
    pv_xpu_web_worker_device_mem_free_wasm: (memAddress: number) => Promise<void>;
    pv_xpu_web_worker_device_mem_copy_to_xpu_wasm: (memAddress: number, hostAddress: number, offset: number, sizeBytes: number) => Promise<void>;
    pv_xpu_web_worker_device_mem_copy_from_xpu_wasm: (memAddress: number, hostAddress: number, offset: number, sizeBytes: number) => Promise<void>;
    pv_xpu_web_worker_device_mem_memset_wasm: (memAddress: number, fillByte: number, sizeBytes: number) => Promise<void>;
    pv_xpu_web_worker_get_max_workers_wasm: (maxWorkersAddress: number) => Promise<void>;
    pv_xpu_web_worker_timer_start_wasm: (objAddress: number) => Promise<void>;
    pv_xpu_web_worker_timer_stop_wasm: (objAddress: number) => Promise<void>;
};
export { initXpu, };
//# sourceMappingURL=pv_xpu.d.ts.map