apply plugin: 'com.android.application'

Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
    if (project.hasProperty("pvTestingAccessKey")) {
        properties.put("pvTestingAccessKey", project.getProperty("pvTestingAccessKey"))
    }
    if (project.hasProperty("pvTestingModelName")) {
        properties.put("pvTestingModelName", project.getProperty("pvTestingModelName"))
    }
    if (project.hasProperty("pvTestingDevice")) {
        properties.put("pvTestingDevice", project.getProperty("pvTestingDevice"))
    }

    if (project.hasProperty("storePassword")) {
        properties.put("storePassword", project.getProperty("storePassword"))
    }
    if (project.hasProperty("storeFile")) {
        properties.put("storeFile", project.getProperty("storeFile"))
    }
    if (project.hasProperty("keyAlias")) {
        properties.put("keyAlias", project.getProperty("keyAlias"))
    }
    if (project.hasProperty("keyPassword")) {
        properties.put("keyPassword", project.getProperty("keyPassword"))
    }
}

android {
    compileSdkVersion defaultTargetSdkVersion

    defaultConfig {
        applicationId "ai.picovoice.picollm.testapp"
        minSdkVersion 21
        targetSdkVersion defaultTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue 'string', 'pvTestingAccessKey', properties.getProperty("pvTestingAccessKey", "")
        resValue 'string', 'pvTestingModelName', properties.getProperty("pvTestingModelName", "")
        resValue 'string', 'pvTestingDevice', properties.getProperty("pvTestingDevice", "")
    }

     signingConfigs {
         release {
             storePassword properties.getProperty("storePassword")
             storeFile file(properties.getProperty("storeFile", ".dummy.jks"))
             keyAlias properties.getProperty("keyAlias")
             keyPassword properties.getProperty("keyPassword")
         }
     }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            testBuildType "debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            testBuildType "release"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        abortOnError false
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.code.gson:gson:2.10'

    // implementation 'ai.picovoice:picollm-android:0.0.1'
    implementation files('../../../../binding/android/PicoLLM/picollm/build/outputs/aar/picollm-release.aar')

    // Espresso UI Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('com.microsoft.appcenter:espresso-test-extension:1.4')
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.5.1')
}

tasks.register('copyLibs', Copy) {
    from("${rootDir}/../../../resources/.test/test_data.json")
    into("${rootDir}/picollm-test-app/src/androidTest/assets/test_resources")
}

preBuild.dependsOn copyLibs